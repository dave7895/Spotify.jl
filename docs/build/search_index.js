var documenterSearchIndex = {"docs":
[{"location":"library.html#Libary-API","page":"Libary API","title":"Libary API","text":"","category":"section"},{"location":"library.html","page":"Libary API","title":"Libary API","text":"Library.library_get_saved_shows()","category":"page"},{"location":"library.html#Spotify.library_get_saved_shows-Tuple{}","page":"Libary API","title":"Spotify.library_get_saved_shows","text":"Get a User's Saved Shows\n\nSummary: Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n\nlimit Optional: The maximum number of objects to return. Default 20. Minimum 1. Maximum 50. \n\noffset Optional: The index of the first object to return. Default 0.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html","page":"Libary API","title":"Libary API","text":"Modules = [Spotify]","category":"page"},{"location":"library.html#Spotify.Spotify","page":"Libary API","title":"Spotify.Spotify","text":"Module exports functions based on documentation structure\n\nusing Spotify\n# See all functions :\nvarinfo(Spotify; recursive=true)\nOr use tab_complation after typing\n\nSpotify.+tab\nTracks.+tab\n\n\n\n\n\n","category":"module"},{"location":"library.html#Spotify.AUTH_URL","page":"Libary API","title":"Spotify.AUTH_URL","text":"For the client credentials flow\n\n\n\n\n\n","category":"constant"},{"location":"library.html#Spotify.BROWSERS","page":"Libary API","title":"Spotify.BROWSERS","text":"A list of potentially available browsers, to be tried in succession if present\n\n\n\n\n\n","category":"constant"},{"location":"library.html#Spotify.COUNTBROWSER","page":"Libary API","title":"Spotify.COUNTBROWSER","text":"For next value: COUNTBROWSER(). For current value: COUNTBROWSER.value\n\n\n\n\n\n","category":"constant"},{"location":"library.html#Spotify.DEFAULT_IMPLICIT_GRANT","page":"Libary API","title":"Spotify.DEFAULT_IMPLICIT_GRANT","text":"These permissions are not requested until the current scope is insufficient, or the user calls 'getimplicitgrant()'\n\nDefault requested permissions are 'client-credentials'.\n\n\n\n\n\n","category":"constant"},{"location":"library.html#Spotify.OAUTH_AUTHORIZE_URL","page":"Libary API","title":"Spotify.OAUTH_AUTHORIZE_URL","text":"For the 'Implicit grant flow\n\n\n\n\n\n","category":"constant"},{"location":"library.html#Spotify.Countbrowser","page":"Libary API","title":"Spotify.Countbrowser","text":"A stateful browser counter.\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpCategoryId","page":"Libary API","title":"Spotify.SpCategoryId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpId","page":"Libary API","title":"Spotify.SpId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpPlaylistId","page":"Libary API","title":"Spotify.SpPlaylistId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpUri","page":"Libary API","title":"Spotify.SpUri","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpUrl","page":"Libary API","title":"Spotify.SpUrl","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify.SpUserId","page":"Libary API","title":"Spotify.SpUserId","text":"All web API arguments are strings, but types  SpUri, SpId, CategoryId, SpUserId, SpUrl  aids in picking default values. format\n\nPARAMETER DESCRIPTION VALUE\nSpUri The resource identifier that you can enter, for example, in the \n Spotify Desktop client’s search box to locate an artist, \n album, or track. To find a Spotify URI simply right- \n click (on Windows) or Ctrl-Click (on a Mac) on spotify:track:\n the artist’s or album’s or track’s name. 6rqhFgbbKwnb9MLmUQDhG6\nSpId The base-62 identifier that you can find at the end of the \n Spotify URI (see above) for an artist, track, album, \n playlist, etc. Unlike a Spotify URI, a Spotify ID does \n not clearly identify the type of resource; that information is \n provided elsewhere in the call. 6rqhFgbbKwnb9MLmUQDhG6\nSpCategoryId The unique string identifying the Spotify category. party\nSpUserId The unique string identifying the Spotify user that you can \n find at the end of the Spotify URI for the user. The ID \n of the current user can be obtained via the Web API endpoint. wizzler\nSpUrl An HTML link that opens a track, album, app, playlist or other \n Spotify resource in a Spotify client (which  client \n is determined by the user’s device and http://open.spotify.com/\n account settings at play.spotify.com. track/6rqhFgbbKwnb9MLmUQDhG6\n\n\n\n\n\n","category":"type"},{"location":"library.html#Spotify._get_ini_fnam-Tuple{}","page":"Libary API","title":"Spotify._get_ini_fnam","text":"Get an existing, readable ini file name, create it if necessary\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.album_get","page":"Libary API","title":"Spotify.album_get","text":"Get an Album(s)\n\nSummary: Get Spotify catalog information for an album(s)\n\nalbum_id Required: The Spotify ID for the album. Up to 20 albums can be passed by comma separating the ID's\n\nmarket Optional: An ISO 3166-1 alpha-2 country code. Default \"US\"\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.album_get_tracks","page":"Libary API","title":"Spotify.album_get_tracks","text":"Get an Album's Tracks\n\nSummary: Get Spotify catalog information about an album's tracks. Optional parameters can be used to limit the number of tracks returned \n\nalbum_id Required: The Spotify ID for the album. Up to 20 albums can be passed by limit Optional: The maximum number of tracks to return. Default 20\n\noffset Optional: The index of the first track to return. Default 0\n\nmarket Optional: An ISO 3166-1 alpha-2 country code. Default \"US\"\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.artist_get-Tuple{Any}","page":"Libary API","title":"Spotify.artist_get","text":"Get an Artist\n\nSummary: Get Spotify catalog information for a single artist identified by their unique Spotify ID. \n\nartist_id Required: The Spotify artist ID. Up to 50 artist ID's can be passed by comma delimiting the ID's \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.artist_get_albums","page":"Libary API","title":"Spotify.artist_get_albums","text":"Get an Artists Albums\n\nSummary: Get Spotify catalog information about an artist's albums.\n\nartist_id Required: The Spotify artist ID. Up to 50 artist ID's can be passed by comma delimiting the ID's\n\ninclude_groups Optional: A comma-separated list of keywords that will be used to filter the response. If not supoplied, all album types will be returned. Valid values:\n\nalbum\nsingle\ncompilation\nappears_on\n\ncountry Optional: An ISO 3166-1 alpha-2 country code string. Use this to limit the response to one particular geographical market. Default \"US\"\n\nlimit Optional: The number of album objects to return. Default 20\n\noffset Optional: The index of the first album to return. Default 0\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.artist_get_related_artists-Tuple{Any}","page":"Libary API","title":"Spotify.artist_get_related_artists","text":"Get an Artist's Related Artists\n\nSummary: Get spotify catalog information about artists similar to a given artist. Similarity is based on analysis of the Spotify community's listening history.\n\nartist_id Required: The Spotify artist ID.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.artist_top_tracks","page":"Libary API","title":"Spotify.artist_top_tracks","text":"Get an Artist's Top Tracks\n\nSummary: Get Spotify catalog information about an artist's top tracks by country.\n\nartist_id Required: The Spotify artist ID.\n\ncountry Optional: An ISO 3166-1 alpha-2 country code string. Use this to limit the response to one particular geographical market. Default \"US\"\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.authorize-Tuple{}","page":"Libary API","title":"Spotify.authorize","text":"authorize()\n\nGet and store client credentials. Any other credentials will be dropped.\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.category_get","page":"Libary API","title":"Spotify.category_get","text":"\" Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\ncountry: (Optional) A country: ISO 3166-1 alpha-2 country code. Provide this parameter to ensure that the category exists for a particular country.\n\nlocale: (Optional) The desired language, consisting of an ISO 639-1 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the category strings returned in a particular language. Note that, if locale is not supplied, or if the specified language is not available, the category strings returned will be in the Spotify default language (American English).\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.category_get_featured_playlist","page":"Libary API","title":"Spotify.category_get_featured_playlist","text":"Get a list of Spotify featured playlists (shown, for example, on a Spotify player’s ‘Browse’ tab).\n\ncountry: (Optional) A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.\n\nlocale: (Optional) The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n\noffset: (Optional) The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.\n\ntimestamp: (Optional) A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss.  Use this parameter to specify the user’s local time to get results tailored for that specific date and time in the day. If not provided, the response defaults to the current UTC time.  Example: “2014-10-23T09:00:00” for a user whose local time is 9AM. If there were no featured playlists (or there is no data) at the specified time, the response will revert to the current UTC time.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.category_get_new_releases","page":"Libary API","title":"Spotify.category_get_new_releases","text":"Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n\ncountry: (Optional) A country: an ISO 3166-1 alpha-2 country code. Provide this parameter if you want the list of returned items to be relevant to a particular country. If omitted, the returned items will be relevant to all countries.\n\nlocale: (Optional) The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n\noffset: (Optional) Optional. The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.category_get_playlist","page":"Libary API","title":"Spotify.category_get_playlist","text":"Get a list of Spotify playlists tagged with a particular category.\n\ncountry: (Optional) A country: an ISO 3166-1 alpha-2 country code.\n\nlimit: (Optional) The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n\noffset: (Optional) The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.category_get_several","page":"Libary API","title":"Spotify.category_get_several","text":"Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\ncountry: (Optional) A country: an ISO 3166-1 alpha-2 country code.\n\nlimit: (Optional) The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\n\noffset: (Optional) The index of the first item to return. Default: 0 (the first object). Use with limit to get the next set of items.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.episodes_get","page":"Libary API","title":"Spotify.episodes_get","text":"Get an Episode\n\nSummary: Get Spotify catalog information for a single peisode identified by it's unique Spotify ID.\n\nepisode_id Required: The Spotify ID for the episode_id. Up to 50 episodes can be passed, comma delimited.\n\nmarket Optional: An ISO 3166-1 alpha 2 country code.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.follow_artists","page":"Libary API","title":"Spotify.follow_artists","text":"follow_artists(item_type::String=\"artist\", limit::Int64=20)\n\nSummary: Get the current user's followed artists.\n\nArguments\n\nitem_type::String Required: The ID type. Currently only artist is supported. Default artist.\nlimit::Int64 Optional: The maximum number of items to return. Default 20, Minimum 1, Maximum 50. \n\nExample\n\njulia> Spotify.follow_artists()[1][\"artists\"]\n[ Info: We try the request without checking if current grant includes scope user-follow-modify.\nJSON3.Object{Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}} with 6 entries:\n  :items   => JSON3.Object[{…\n  :next    => nothing\n  :total   => 2\n  :cursors => {…\n  :limit   => 20\n  :href    => \"https://api.spotify.com/v1/me/following?type=artist&limit=20\"\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.follow_artists_users-Tuple{Any, Any}","page":"Libary API","title":"Spotify.follow_artists_users","text":"Follow Artists or Users\n\nSummary: Add the current user as a follower of one or more artists or other Spotify users.\n\ntype Required: The ID type: either artist or user. \n\nids Required: A comma-separated list of the artists or users Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.follow_check-Tuple{String, String}","page":"Libary API","title":"Spotify.follow_check","text":"follow_check(item_type, ids)\n\nSummary: Check to see if the current user is following one or more artists or other Spotify users.\n\nArguments\n\nitem_type::String Required: The ID type, either artist or user.\n\nids::String Required: A comma separated list of the artist or user Spotify IDs to check. Maximum 50.\n\nExample\n\njulia> Spotify.follow_check(\"artist\", \"7fxBPUc2bTUgl7GLuqjajk\")[1]\n[ Info: We try the request without checking if current grant includes scope user-follow-read.\n1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 1\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.follow_check_playlist-Tuple{Any, Any}","page":"Libary API","title":"Spotify.follow_check_playlist","text":"follow_check_playlist(playlist_id::String, user_id::String)\n\nSummary: Check to see if one or more Spotify users are following a specified playlist_id.\n\nArguments\n\nplaylist_id::String Required: The Spotify ID of the playlist.\n\nuser_id::String Required: A comma separated list of the user Spotify IDS to check. Maximum 5.\n\nExample\n\njulia> Spotify.follow_check_playlist(\"37i9dQZF1DZ06evO3Khq6I\", user_id)[1]\n1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.follow_playlist-Tuple{Any}","page":"Libary API","title":"Spotify.follow_playlist","text":"Follow a Playlist\n\nSummary: Add the currend user as a follower of a playlist. \n\nplaylist_id Required: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.fwhich-Tuple{Any}","page":"Libary API","title":"Spotify.fwhich","text":"Get application path for developer applications\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.genres_get-Tuple{}","page":"Libary API","title":"Spotify.genres_get","text":"genres_get()\n\nSummary: Retrieve a list of available genres seed parameter values for recommendations.\n\nExample\n\njulia> Spotify.genres_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :genres => [\"acoustic\", \"afrobeat\", \"alt-rock\", \"alternative\", \"ambient\", \"anime\", \"black-metal\",…\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.get_id_secret_redirect-Tuple{}","page":"Libary API","title":"Spotify.get_id_secret_redirect","text":"Get id and secret as 32-byte string, no encryption\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.get_implicit_grant-Tuple{}","page":"Libary API","title":"Spotify.get_implicit_grant","text":"If the user gives us access, that will be in the future. Is it worth waiting for? If so, call wait_for_ig_access()\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.launch_command-Tuple{Any}","page":"Libary API","title":"Spotify.launch_command","text":"Constructs launch command\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_check_saved_albums-Tuple{Any}","page":"Libary API","title":"Spotify.library_check_saved_albums","text":"Check User's Saved Albums\n\nSummary: Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.\n\nalbum_ids Required: A comma separated list of the Spotify IDs for the albums. Max 50.\n\nRequired\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_check_saved_shows-Tuple{Any}","page":"Libary API","title":"Spotify.library_check_saved_shows","text":"Check User's Saved Shows\n\nSummary: Check if one or more shows is already saved in the current Spotify user's library.\n\nshow_ids Required: A comma separated list of the Spotify IDs for the shows. Maximum 50\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_check_saved_tracks-Tuple{Any}","page":"Libary API","title":"Spotify.library_check_saved_tracks","text":"Check User's Saved Tracks\n\nSummary: Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of the Spotify IDs for the tracks. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_get_saved_albums","page":"Libary API","title":"Spotify.library_get_saved_albums","text":"Get a User's Saved Albums\n\nSummary: Get a list of the albums saved in the current Spotify user's 'Your Music' library.\n\nlimit Optional: The maximum number of objects to return. Default 20. Minimum 1. Maximum 50. \n\noffset Optional: The index of the first object to return. Default 0.\n\nmarket Optional: An ISO 3166-1 alpha-2 country code.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.library_get_saved_shows","page":"Libary API","title":"Spotify.library_get_saved_shows","text":"Get a User's Saved Shows\n\nSummary: Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n\nlimit Optional: The maximum number of objects to return. Default 20. Minimum 1. Maximum 50. \n\noffset Optional: The index of the first object to return. Default 0.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.library_get_saved_tracks","page":"Libary API","title":"Spotify.library_get_saved_tracks","text":"Get a User's Saved Tracks\n\nSummary: Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n\nlimit Optional: The maximum number of objects to return. Default 20. Minimum 1. Maximum 50. \n\noffset Optional: The index of the first object to return. Default 0.\n\nmarket Optional: An ISO 3166-1 alpha-2 country code.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.library_remove_albums-Tuple{Any}","page":"Libary API","title":"Spotify.library_remove_albums","text":"Remove Albums for Current User\n\nSummary: Remove one or more albums for the current user's 'Your Music' library.\n\nalbum_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_remove_shows-Tuple{Any}","page":"Libary API","title":"Spotify.library_remove_shows","text":"Remove Shows for Current User\n\nSummary: Remove one or more shows for the current user's library.\n\nshow_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_remove_tracks-Tuple{Any}","page":"Libary API","title":"Spotify.library_remove_tracks","text":"Remove Tracks for Current User\n\nSummary: Remove one or more tracks for the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_save_album-Tuple{Any}","page":"Libary API","title":"Spotify.library_save_album","text":"Save Albums for Current User\n\n** Summary**: Save one or more albums to the current user's 'Your Music' library.\n\nalbum_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_save_show-Tuple{Any}","page":"Libary API","title":"Spotify.library_save_show","text":"Save Shows for Current User\n\n** Summary**: Save one or more shows to the current user's library.\n\nshows_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.library_save_track-Tuple{Any}","page":"Libary API","title":"Spotify.library_save_track","text":"Save Tracks for Current User\n\n** Summary**: Save one or more tracks to the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of Spotify IDs. Maximum 50. \n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.markets_get-Tuple{}","page":"Libary API","title":"Spotify.markets_get","text":"markets_get()\n\nSummary: Get the list of markets where Spotify is available.\n\nExample\n\njulia> Spotify.markets_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :markets => [\"AD\", \"AE\", \"AG\", \"AL\", \"AM\", \"AO\", \"AR\", \"AT\", \"AU\", \"AZ\"  …\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.max_acousticness","page":"Libary API","title":"Spotify.max_acousticness","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_danceability","page":"Libary API","title":"Spotify.max_danceability","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_duration_ms","page":"Libary API","title":"Spotify.max_duration_ms","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_energy","page":"Libary API","title":"Spotify.max_energy","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_instrumentalness","page":"Libary API","title":"Spotify.max_instrumentalness","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_key","page":"Libary API","title":"Spotify.max_key","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_liveness","page":"Libary API","title":"Spotify.max_liveness","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_loudness","page":"Libary API","title":"Spotify.max_loudness","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_mode","page":"Libary API","title":"Spotify.max_mode","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_popularity","page":"Libary API","title":"Spotify.max_popularity","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_speechiness","page":"Libary API","title":"Spotify.max_speechiness","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_tempo","page":"Libary API","title":"Spotify.max_tempo","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_time_signature","page":"Libary API","title":"Spotify.max_time_signature","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.max_valence","page":"Libary API","title":"Spotify.max_valence","text":"For each tunable track attribute, a hard ceiling on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, max_instrumentalness=0.35 would filter out most tracks that are likely to be instrumental.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_acousticness","page":"Libary API","title":"Spotify.min_acousticness","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_danceability","page":"Libary API","title":"Spotify.min_danceability","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_duration_ms","page":"Libary API","title":"Spotify.min_duration_ms","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_energy","page":"Libary API","title":"Spotify.min_energy","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_instrumentalness","page":"Libary API","title":"Spotify.min_instrumentalness","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_key","page":"Libary API","title":"Spotify.min_key","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_liveness","page":"Libary API","title":"Spotify.min_liveness","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_loudness","page":"Libary API","title":"Spotify.min_loudness","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_mode","page":"Libary API","title":"Spotify.min_mode","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_popularity","page":"Libary API","title":"Spotify.min_popularity","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_speechiness","page":"Libary API","title":"Spotify.min_speechiness","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_tempo","page":"Libary API","title":"Spotify.min_tempo","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_time_signature","page":"Libary API","title":"Spotify.min_time_signature","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.min_valence","page":"Libary API","title":"Spotify.min_valence","text":"For each tunable track attribute, a hard floor on the selected track attribute’s value can be provided. See tunable track attributes below for the list of available options. For example, min_tempo=140 would restrict results to only those tracks with a tempo of greater than 140 beats per minute.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.open_a_browser-Tuple{}","page":"Libary API","title":"Spotify.open_a_browser","text":"Try to open one browser from BROWSERS. In some cases we expect an immediate indication of failure, for example when the corresponding browser is not found on the system. In other cases, we will just wait in vain. In those cases, call this function again after a reasonable timeout. The function remembers which browsers were tried before.\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get-Tuple{Any}","page":"Libary API","title":"Spotify.playlist_get","text":"playlist_get(playlist_id::String; additional_types::String=\"track\", fields::String=\"\",\nmarket::String=\"US\")\n\nSummary: Get details about a playlist owned by a Spotify user.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nfields::String : Filters for the query, a comma-separated list of the fields to return.                    For example, to get just the added date and user ID of the adder,                     fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                    all fields are returned.\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.playlist_get(\"37i9dQZF1E4vUblDJbCkV3\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 15 entries:\n  :collaborative => false\n  :description   => \"With Roo Panes, Hiss Golden Messenger, Nathaniel Rateliff and more\"\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3?additional_types=track\"\n  :id            => \"37i9dQZF1E4vUblDJbCkV3\"\n  :images        => JSON3.Object[{…\n  :name          => \"Lord Huron Radio\"\n  :owner         => {…\n  :primary_color => nothing\n  :public        => false\n  :snapshot_id   => \"MTYzNTg2NzMxNCwwMDAwMDAwMGU3MTgwNDkzOWE5NTQ2NGM1NmYzNTYyZDhhZTc1ZGNh\"\n  :tracks        => {…\n  :type          => \"playlist\"\n  :uri           => \"spotify:playlist:37i9dQZF1E4vUblDJbCkV3\"\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_category-Tuple{Any}","page":"Libary API","title":"Spotify.playlist_get_category","text":"playlist_get_category(category_id::String; country::String=\"US\", limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of Spotify playlists tagged with a particular category.\n\nArguments\n\ncategory_id::String : The unique string identifying the Spotify category, e.g. \"dinner\", \"party\" etc.\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_category(\"party\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :playlists => {…\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_cover_image-Tuple{Any}","page":"Libary API","title":"Spotify.playlist_get_cover_image","text":"playlist_get_cover_image(playlist_id::String)\n\nSummary: Get the current image associated with a specific playlist.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nExample\n\njulia> Spotify.playlist_get_cover_image(\"37i9dQZF1E4vUblDJbCkV3\")[1]\n1-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n {\n   \"height\": nothing,\n      \"url\": \"https://seeded-session-images.scdn.co/v1/img/artist/6ltzsmQQbmdoHHbLZ4ZN25/en\",\n    \"width\": nothing\n}\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_current_user-Tuple{}","page":"Libary API","title":"Spotify.playlist_get_current_user","text":"playlist_get_current_user(limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of the playlists owned or followed by the current Spotify user.\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_current_user()[1]\n[ Info: We try the request without checking if current grant includes scope playlist-read-private.\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/users/your_user_id/playlists?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => nothing\n  :offset   => 0\n  :previous => nothing\n  :total    => 2\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_featured-Tuple{}","page":"Libary API","title":"Spotify.playlist_get_featured","text":"playlist_get_featured(;country::String=\"US\", limit::Int64=20, locale::String=\"en_US\", \n                           offset::Int64=0, timestamp::String=\"2021-11-09T17:28:14.297\")\n\nSummary: Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).\n\nOptional keywords\n\ncountry::String : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                      the list of returned items to be relevant to a particular country.                     Default is set to \"US\".\nlimit::Int64 : Maximum number of items to return, default is set to 20\nlocale::String : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase                     ISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".                     Provide this parameter if you want the results returned in a particular language (where available).                    Default is set to \"enUS\".\noffset::Int64 : Index of the first item to return, default is set to 0\ntimestamp::String : A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time                        to get results tailored for that specific date and time in the day.                       Default is set to user's current time.    \n\nExample\n\njulia> Spotify.playlist_get_featured(locale=\"en_UK\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :message   => \"Tuesday jams\"\n  :playlists => {…\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_tracks-Tuple{Any}","page":"Libary API","title":"Spotify.playlist_get_tracks","text":"playlist_get_tracks(playlist_id::String; additional_types=\"track\", limit=50, \noffset=0, market=\"US\")\n\nSummary: Get details about the items of a playlist.\n\nArguments\n\nplaylist_id::String : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types::String : \"track\" (default) or \"episode\"\nfields::String : Filters for the query, a comma-separated list of the fields to return.                    For example, to get just the added date and user ID of the adder,                     fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                    all fields are returned.\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                     only episodes that are available in that market will be returned.                     Default is set to \"US\".\n\nExample\n\njulia> Spotify.playlist_get_tracks(\"37i9dQZF1E4vUblDJbCkV3\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=0&limit=20&market=US&additional_types=…\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=20&limit=20&market=US&additional_types…\n  :offset   => 0\n  :previous => nothing\n  :total    => 50\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.playlist_get_user-Tuple{Any}","page":"Libary API","title":"Spotify.playlist_get_user","text":"playlist_get_user(user_id::String; limit::Int64=20, offset::Int64=0)\n\nSummary: Get a list of the playlists owned or followed by a Spotify user.\n\nArguments\n\nuser_id::String : Alphanumeric ID of the user or name (e.g. \"smedjan\")\n\nOptional keywords\n\nlimit::Int64 : Maximum number of items to return, default is set to 20\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.playlist_get_user(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=20&limit=20\"\n  :offset   => 0\n  :previous => nothing\n  :total    => 98\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.recommendations_get","page":"Libary API","title":"Spotify.recommendations_get","text":"Get Recommendations Based on Seeds\n\nseeds: (Required) A dictionary containing keys(seedgenres, seedartists, seed_tracks) and values for each key being seeds delimeted by a comma up to 5 seeds for each category\n\nExample\n\nDict(\"seedartists\" => \"s33dart1st,s33edart!st2\", \"seedgenres\" => \"g3nre1,genr32\", \"seed_tracks\" => \"trackid1,trackid2\")\n\ntrackattributes: (Optional) a dictionary containing key values for different tunable track trackattributes\n\nSee https://developer.spotify.com/documentation/web-api/reference/browse/get-recommendations/\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.search_get-Tuple{}","page":"Libary API","title":"Spotify.search_get","text":"search_get(;q::String=\"Coldplay\", item_type::String=\"track,artist\", include_external::String=\"\",\n                limit::Int64=20, market::String=\"US\", offset::Int64=0)\n\nSummary: Get Spotify catalog information about albums, artists, playlists, tracks,               shows or episodes that match a keyword string.\n\nOptional keywords\n\nq::String : Search query, e.g. \"Coldplay\" which is also set as the default\nitem_type::String : A comma-separated list of item types to search across. Search results include                   hits from all the specified item types. For example, item_type = \"album,tarck\" returns                   both albums and tracks with the search query included in their name.\ninclude_external::String : If include_external=\"audio\" is specified then the response will include any                               relevant audio content that is hosted externally.\nlimit::Int64 : Maximum number of items to return, default is set to 20\nmarket::String : An ISO 3166-1 alpha-2 country code. If a country code is specified,                        only episodes that are available in that market will be returned.                        Default is set to \"US\".\noffset::Int64 : Index of the first item to return, default is set to 0\n\nExample\n\njulia> Spotify.search_get(;q = \"Greenday\", item_type = \"album\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => {…\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.show_get","page":"Libary API","title":"Spotify.show_get","text":"Get a Show\n\nSummary: Get a Spotify catalog information for a single show identified by it's unique Spotify ID.\n\nshow_id Required: The Spotify ID for the show. Up to 50 shows can be passed seperated with a comma. No whitespace.\n\nmarket Optional: An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows and episodes that are available in that market will be returned.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.show_get_episodes","page":"Libary API","title":"Spotify.show_get_episodes","text":"Get a Show's Episodes\n\nSummary: Get Spotify catalog information about a show’s episodes. Optional parameters can be used to limit the number of episodes returned.\n\nshow_id Required: The Spotify ID for the show.\n\nmarket Optional: Optional. An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows and episodes that are available in that market will be returned.\n\nlimit Optional: The maximum number of episodes to return. Default = 20. Minimum 1. Maximum 50 offset Optional: The index of the first episode to return. Default: 0 (the first object). Use the limit to get the next set of episodes.\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.spotify_request","page":"Libary API","title":"Spotify.spotify_request","text":"spotify_request(url_ext::String, method::String= \"GET\"; scope = \"client-credentials\")\n -> (r::JSON3.Object, retry_in_seconds::Int)\n\nAccess the Spotify Web API. Error results return an empty Object.  Errors are written to 'stderr', expect for 'API rate limit exceeded', as  the output would typically occur in the middle of recursive calls.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.strip_embed_code-Tuple{Any}","page":"Libary API","title":"Spotify.strip_embed_code","text":"strip_embed_code(sdvs<substring>)\n-> Spid(<substring>)\n\nGet the interesting part for pasting:\n\nSpotify app -> Right click -> Share -> Copy embed code to clipboard\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.target_acousticness","page":"Libary API","title":"Spotify.target_acousticness","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_danceability","page":"Libary API","title":"Spotify.target_danceability","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_duration_ms","page":"Libary API","title":"Spotify.target_duration_ms","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_energy","page":"Libary API","title":"Spotify.target_energy","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_instrumentalness","page":"Libary API","title":"Spotify.target_instrumentalness","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_key","page":"Libary API","title":"Spotify.target_key","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_liveness","page":"Libary API","title":"Spotify.target_liveness","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_loudness","page":"Libary API","title":"Spotify.target_loudness","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_mode","page":"Libary API","title":"Spotify.target_mode","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_popularity","page":"Libary API","title":"Spotify.target_popularity","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_speechiness","page":"Libary API","title":"Spotify.target_speechiness","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_tempo","page":"Libary API","title":"Spotify.target_tempo","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_time_signature","page":"Libary API","title":"Spotify.target_time_signature","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.target_valence","page":"Libary API","title":"Spotify.target_valence","text":"For each of the tunable track attributes (below) a target value may be provided. Tracks with the attribute values nearest to the target values will be preferred. For example, you might request targetenergy=0.6 and targetdanceability=0.8. All target values will be weighed equally in ranking results.\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.top_artists-Tuple{}","page":"Libary API","title":"Spotify.top_artists","text":"top_artists(;offset=0, limit=20, time_range=\"medium_term\")\n\nSummary: Get the current user's top artists based on calculated affinity.\n\nOptional keywords\n\noffset Optional: The index of the first tracks to return. Default 0.\n\nlimit Optional: The number of tracks to return. Default 20. \ntime_range Optional: Over what time frame the affinities are computed.                           Valid Options:                           * long_term : Calculated from several years of data including all new data as it becomes available                           * medium_term : Approx. last 6 months                            * short_term : Approx. last 4 weeks\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.top_tracks-Tuple{}","page":"Libary API","title":"Spotify.top_tracks","text":"top_tracks(;offset=0, limit=20, time_range=\"medium_term\")\n\nSummary: Get the current user's top tracks based on calculated affinity.\n\nOptional keywords\n\noffset Optional: The index of the first tracks to return. Default 0.\n\nlimit Optional: The number of tracks to return. Default 20. \ntime_range Optional: Over what time frame the affinities are computed.                           Valid Options:                           * long_term : Calculated from several years of data including all new data as it becomes available                           * medium_term : Approx. last 6 months                            * short_term : Approx. last 4 weeks\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.tracks_get","page":"Libary API","title":"Spotify.tracks_get","text":"Get a Track\n\nSummary: Get a spotify catalog information for a single track identified by it's unique Spotify ID\n\ntrack_id Required: The Spotify ID for the track. Up to 50 tracks can be passed seperated with a comma. No whitespace.\n\nmarket Optional: An ISO 3166=1 alpha-2 country code\n\nReference\n\n\n\n\n\n","category":"function"},{"location":"library.html#Spotify.tracks_get_audio_analysis-Tuple{Any}","page":"Libary API","title":"Spotify.tracks_get_audio_analysis","text":"Get Audio Analysis for a Track\n\nSummary: Get a detailed audio analysis for a single track identified by it's unique Spotify ID.\n\ntrack_id Required: The Spotify ID for the track.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.tracks_get_audio_features-Tuple{Any}","page":"Libary API","title":"Spotify.tracks_get_audio_features","text":"Get Audio Features for a Track\n\nSummary: Get audio feature information for a single track identified by it's unique Spotify ID\n\ntrack_id Required: The Spotify ID for the track. Up to 50 tracks can be passed seperated with a comma. No whitespace.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.unfollow_artists_users-Tuple{Any, Any}","page":"Libary API","title":"Spotify.unfollow_artists_users","text":"Unfollow Artists or Users\n\nSummary: Remove the current user as a follower of one or more artists or other Spotify users.\n\ntype Required: The ID type: either artist or user. \n\nids Required: A comma-separated list of the artists or users Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.unfollow_playlist-Tuple{Any}","page":"Libary API","title":"Spotify.unfollow_playlist","text":"Unfollow a Playlist\n\nSummary: Remove the current user as a follower of a playlist.\n\nplaylist_id Required: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.user_get_current_profile-Tuple{}","page":"Libary API","title":"Spotify.user_get_current_profile","text":"user_get_current_profile()\n\n**Summary**: Get detailed profile information about the current user \n            (including the current user's username).\n\nExample\n\njulia> Spotify.user_get_current_profile()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 12 entries:\n  :country          => \"NL\"\n  :display_name     => \"Itachi\"\n  :email            => \"your_id@gmail.com\"\n  :explicit_content => {…\n  :external_urls    => {…\n  :followers        => {…\n  :href             => \"https://api.spotify.com/v1/users/your_user_id\"\n  :id               => \"your_user_id\"\n  :images           => Union{}[]\n  :product          => \"premium\"\n  :type             => \"user\"\n  :uri              => \"spotify:user:your_user_id\"\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.user_get_profile-Tuple{Any}","page":"Libary API","title":"Spotify.user_get_profile","text":"user_get_profile(user_id::String)\n\nSummary: Get public profile information about a Spotify user.\n\nArguments\n\nuser_id::String : Alphanumeric ID of the user or name (e.g. \"smedjan\") \n\nExample\n\njulia> Spotify.user_get_profile(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 8 entries:\n  :display_name  => \"smedjan\"\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/users/smedjan\"\n  :id            => \"smedjan\"\n  :images        => Union{}[]\n  :type          => \"user\"\n  :uri           => \"spotify:user:smedjan\"\n\n\n\n\n\n","category":"method"},{"location":"library.html#Spotify.@_ie-Tuple","page":"Libary API","title":"Spotify.@_ie","text":"import export shorthand\n\n\n\n\n\n","category":"macro"},{"location":"reference/functionindex.html","page":"-","title":"-","text":"@index","category":"page"},{"location":"index.html#Spotify.jl","page":"Spotify.jl","title":"Spotify.jl","text":"","category":"section"},{"location":"index.html#A-simple-Spotify-API-Wrapper-in-Julia","page":"Spotify.jl","title":"A simple Spotify API Wrapper in Julia","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"println(\"he shidded a lot in his pants today\")","category":"page"}]
}
