var documenterSearchIndex = {"docs":
[{"location":"endpoints.html#Endpoints","page":"Endpoints","title":"Endpoints","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Here we list out all the endpoints for given portions of the API","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"warning: Permissions\nCertain endpoints require special permissions that would need elevated authentication methods","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Pages = [\"endpoints.md\"]","category":"page"},{"location":"endpoints.html#Albums","page":"Endpoints","title":"Albums","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Album endpoints are somewhat limited but can be combined with other calls to become very powerful","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"album\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.album_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_contains","text":"album_get_contains(album_ids)\n\nSummary: Check if one or more albums is already saved in the current Spotify user's 'Your Music' library.\n\nArguments\n\nids : A comma-separated list of the Spotify album IDs\n\nExample\n\njulia> album_get_contains([\"2O9mD7oKwBnhQZQUAJM6GM\", \"3eLvDNfWAMpytqIp073FEc\"])[1]\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_multiple","text":"album_get_multiple(album_ids; market = \"\")\n\nSummary: Get Spotify catalog information for multiple albums identified by their Spotify IDs.\n\nArguments\n\nalbum_ids : A comma-separated list of the Spotify IDs for the albums. Maximum: 20 IDs.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> album_get_multiple([\"2O9mD7oKwBnhQZQUAJM6GM\", \"3eLvDNfWAMpytqIp073FEc\"])[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => JSON3.Object[{…\n\nMore formally,\n\njulia> album_get_multiple(SpAlbumId.([\"5XgEM5g3xWEwL4Zr6UjoLo\", \"2rpT0freJsmUmmPluVWqg5\"]))[1]\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.album_get_saved","text":"album_get_saved(;limit = 20, market = \"\", offset = 0)\n\nSummary: Get a list of the albums saved in the current Spotify user's 'Your Music' library.\n\nOptional keywords\n\nlimit         : Maximum number of items to return, default is set to 20\nmarket        : An ISO 3166-1 alpha-2 country code. If a country code is specified,                   only episodes that are available in that market will be returned.                   Default is set to \"US\".\noffset        : Index of the first item to return, default is set to 0\n\nExample\n\njulia> album_get_saved()[1]\n\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/albums?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/me/albums?offset=20&limit=20\"\n  :offset   => 0\n  :previous => nothing\n  :total    => 33\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_single","text":"album_get_single(album_id; market = \"\")\n\n**Summary**: Get Spotify catalog information for a single album.\n\n# Arguments\n- `album_id` : The Spotify ID for the album.\n\n# Optional keywords\n- `market` : An ISO 3166-1 alpha-2 country code.\n\n# Example\n```julia-repl\njulia> album_get_single(\"2O9mD7oKwBnhQZQUAJM6GM\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 19 entries:\n  :album_type             => \"album\"\n  :artists                => JSON3.Object[{…\n  :available_markets      => [\"AD\", \"AE\", \"AR\", \"AT\", \"AU\", \"BD\", \"BE\", \"BG\", \"BH\", \"BO\"  …  \"SK\", \"SV\", \"TH\", \"TN\", \"T…\n  :copyrights             => JSON3.Object[{…\n  :external_ids           => {…\n  :external_urls          => {…\n  :genres                 => Union{}[]\n  :href                   => \"https://api.spotify.com/v1/albums/2O9mD7oKwBnhQZQUAJM6GM\"\n  :id                     => \"2O9mD7oKwBnhQZQUAJM6GM\"\n  :images                 => JSON3.Object[{…\n  :label                  => \"OOO Universal Music\"\n  :name                   => \"200 По встречной\"\n  :popularity             => 47\n  :release_date           => \"2002-01-01\"\n  :release_date_precision => \"day\"\n  :total_tracks           => 12\n  :tracks                 => {…\n  :type                   => \"album\"\n  :uri                    => \"spotify:album:2O9mD7oKwBnhQZQUAJM6GM\"\n```\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_get_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.album_get_tracks","text":"album_get_tracks(album_id; limit = 20, offset = 0, market = \"\")\n\nSummary: Get Spotify catalog information about an album's tracks. Optional parameters             can be used to limit the number of tracks returned.\n\nArguments\n\nalbum_id : The Spotify ID for the album\n\nOptional keywords\n\nlimit         : The maximum number of tracks to return. Default is set to 20.\noffset : The index of the first track to return. Default is 0.\nmarket : An ISO 3166-1 alpha-2 country code. Default is set to \"US\".\n\nExample\n\njulia> album_get_tracks(\"2O9mD7oKwBnhQZQUAJM6GM\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/albums/2O9mD7oKwBnhQZQUAJM6GM/tracks?offset=0&limit=20\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => nothing\n  :offset   => 0\n  :previous => nothing\n  :total    => 12\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_remove_from_library-Tuple{Any}","page":"Endpoints","title":"Spotify.album_remove_from_library","text":"album_remove_from_library(album_ids)\n\nSummary: Remove one or more albums for the current user's 'Your Music' library.\n\nArguments\n\nalbum_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nExample\n\njulia> album_remove_from_library([\"2O9mD7oKwBnhQZQUAJM6GM\", \"3eLvDNfWAMpytqIp073FEc\"])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.album_save_library-Tuple{Any}","page":"Endpoints","title":"Spotify.album_save_library","text":"album_save_library(album_ids)\n\n** Summary**: Save one or more albums to the current user's 'Your Music' library.\n\nArguments\n\nalbum_ids Required: A comma-separated list of Spotify IDs. Maximum 50.\n\nExample\n\njulia> album_save_library([\"2O9mD7oKwBnhQZQUAJM6GM\", \"3eLvDNfWAMpytqIp073FEc\"])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_get_albums-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get_albums","text":"artist_get_albums(artist_id; include_groups = \"album\", country = \"\", limit = 20, offset = 0)\n\nSummary: Get Spotify catalog information about an artist's albums.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nOptional keyword arguments\n\ninclude_groups : A comma-separated list of keywords that will be used to filter the response.                    If not supplied, all album types will be returned.                    Valid values are:                    * album                    * single                    * compilation                    * appears_on\ncountry        : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                    the list of returned items to be relevant to a particular country.                    If omitted, the returned items will be relevant to all countries.\nlimit : The maximum number of tracks to return. Default is set to 20.\noffset : The index of the first track to return. Default is 0.\n\nExample\n\njulia> artist_get_albums(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/artists/0YC192cP3KPCRWx8zr8MfZ/albums?offset=0&limit=20&include_groups=album…\n  :items    => Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/artists/0YC192cP3KPCRWx8zr8MfZ/albums?offset=20&limit=20&include_groups=albu…\n  :offset   => 0\n  :previous => nothing\n  :total    => 663\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_check_saved_albums-Tuple{Any}","page":"Endpoints","title":"Spotify.library_check_saved_albums","text":"Alias for albumgetcontains in albums.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_get_saved_albums-Tuple{}","page":"Endpoints","title":"Spotify.library_get_saved_albums","text":"Alias for albumgetsaved in albums.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_remove_albums-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_albums","text":"Same as albumremovefrom_library in Albums\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_album-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_album","text":"Same as albumsavelibrary\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Artist","page":"Endpoints","title":"Artist","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"artist\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.artist_get-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get","text":"artist_get(artist_id)\n\nSummary: Get Spotify catalog information for a single artist identified by their unique Spotify ID.\n\nArguments\n\nartist_id : The Spotify artist ID.\n\nExample\n\njulia> artist_get(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 10 entries:\n  :external_urls => {…\n  :followers     => {…\n  :genres        => [\"german soundtrack\", \"soundtrack\"]\n  :href          => \"https://api.spotify.com/v1/artists/0YC192cP3KPCRWx8zr8MfZ\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_get_related_artists-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_get_related_artists","text":"artist_get_related_artists(artist_id)\n\nSummary: Get spotify catalog information about artists similar to a given artist.             Similarity is based on analysis of the Spotify community's listening history.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nExample\n\njulia> artist_get_related_artists(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n:artists => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.artist_top_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.artist_top_tracks","text":"artist_top_tracks(artist_id; market = get_user_country())\n\nSummary: Get Spotify catalog information about an artist's top tracks by country.\n\nArguments\n\nartist_id : The Spotify ID of the artist\n\nOptional keyword arguments\n\nmarket       : Default is get_user_country().                  An ISO 3166-1 alpha-2 country code. If a country code is specified, only content that is                  available in that market will be returned. If a valid user access token is specified in                  the request header, the country associated with the user account will take priority over                  this parameter.\n             API note: \"If neither market or user country are provided, the content is considered unavailable\n             for the client. Users can view the country that is associated with their account in the\n             account settings.\"\n\n             Spotify.jl note: If no market is specified, we unexpectedly get 'missing country parameter'.\n             We do not want this behaviour to be general for all calls with an optional \"market\" argument.\n             A default 'market = \"\"' is acceptable for all (?) other API calls with 'market'.\n\nExample\n\njulia> artist_top_tracks(\"0YC192cP3KPCRWx8zr8MfZ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :tracks => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_follow_artists_users-Tuple{Any}","page":"Endpoints","title":"Spotify.users_follow_artists_users","text":"users_follow_artists_users(artist_ids; type= \"artist\")\n\nFollow Artists or Users\n\nSummary: Add the current user as a follower of one or more artists or other Spotify users.\n\nArguments\n\nartist_ids Required: A comma-separated list of the artists or users Spotify IDs. Maximum 50. type Optional: The ID type: either artist (default) or user\n\nExample\n\njulia> artist_ids = SpArtistId.([\"2CIMQHirSU0MQqyYHq0eOx\", \"57dN52uHvrHOxijzpIgu3E\", \"1vCWHaC5f2uS3yhpwWbIA6\"])\n3-element Vector{SpArtistId}:\n spotify:artist:2CIMQHirSU0MQqyYHq0eOx\n spotify:artist:57dN52uHvrHOxijzpIgu3E\n spotify:artist:1vCWHaC5f2uS3yhpwWbIA6\n\njulia> users_follow_artists_users(artist_ids)[1]\n{}\n\njulia> # Cleanup\n\njulia> users_unfollow_artists_users(artist_ids)\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_unfollow_artists_users-Tuple{Any}","page":"Endpoints","title":"Spotify.users_unfollow_artists_users","text":"users_unfollow_artists_users(artist_ids; type = \"artist\")\n\nSummary: Remove the current user as a follower of one or more artists or other Spotify users.\n\nArguments\n\nartist_ids Required: A comma-separated list of the artists' or users' Spotify IDs. Maximum 50.\n\nOptional keyword arguments\n\ntype:  Either \"artist\" (default) or \"user\".\n\njulia> artist_ids = [\"2CIMQHirSU0MQqyYHq0eOx\", \"57dN52uHvrHOxijzpIgu3E\", \"1vCWHaC5f2uS3yhpwWbIA6\"]\n3-element Vector{String}:\n \"2CIMQHirSU0MQqyYHq0eOx\"\n \"57dN52uHvrHOxijzpIgu3E\"\n \"1vCWHaC5f2uS3yhpwWbIA6\"\n\njulia> users_unfollow_artists_users(artist_ids])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Browse","page":"Endpoints","title":"Browse","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"category\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.category_get_featured_playlist-Tuple{}","page":"Endpoints","title":"Spotify.category_get_featured_playlist","text":"Same as playlistgetfeatured in Playlists\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_multiple-Tuple{}","page":"Endpoints","title":"Spotify.category_get_multiple","text":"category_get_multiple(;country = \"\", locale = \"\", limit = 20, offset = 0)\n\nSummary: Get a list of categories used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\nOptional keywords\n\ncountry       : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                   the list of returned items to be relevant to a particular country.                   If omitted, the returned items will be relevant to all countries.\nlocale          : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase\n\nISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\". Provide this parameter if you want the results returned in a particular language (where available). Default is set to \"enUS\".\n\nlimit         : Maximum number of items to return, default is set to 20\noffset        : Index of the first item to return, default is set to 0\n\nExample\n\njulia-repl julia> category_get_multiple()[1].categories.items .|> i-> i.name 20-element Vector{String}:  \"Top Lists\"  \"EQUAL\"  \"Pop\"  ⋮  \"Rock\"  \"Metal\"  \"Sleep\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_new_releases-Tuple{}","page":"Endpoints","title":"Spotify.category_get_new_releases","text":"category_get_new_releases(;country = \"\", locale = \"\", limit = 20, offset = 0)\n\nSummary: Get a list of new album releases featured in Spotify (shown, for example, on a Spotify player’s “Browse” tab).\n\nOptional keywords\n\ncountry       : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                   the list of returned items to be relevant to a particular country.                   If omitted, the returned items will be relevant to all countries.\nlocale        : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase                   ISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".                   Provide this parameter if you want the results returned in a particular language (where available).                   Default is set to \"enUS\".\nlimit         : Maximum number of items to return, default is set to 20\noffset        : Index of the first item to return, default is set to 0\n\nExample\n\njulia> category_get_new_releases()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :albums => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.category_get_playlist","text":"Same as playlistgetcategory in Playlists\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.category_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.category_get_single","text":"category_get_single(category_name; country = \"\", locale = \"\")\n\nSummary: Get a single category used to tag items in Spotify (on, for example, the Spotify player’s “Browse” tab).\n\nArguments\n\ncategory_name : The Spotify category ID for the category.\n\nOptional keywords\n\ncountry       : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                   the list of returned items to be relevant to a particular country.                   If omitted, the returned items will be relevant to all countries.\nlocale          : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase                   ISO 3166-1 alpha-2 country code, joined by an underscore. For example: esMX, meaning \"Spanish (Mexico)\".                   Provide this parameter if you want the results returned in a particular language (where available).                   Default is set to \"enUS\".\n\nExample\n\njulia> category_get_single(\"party\")[1].name\n\"Party\"\n\njulia> category_get_single(\"party\", locale = \"es_MX\")[1].name\n\"Fiesta\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_category-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_category","text":"playlist_get_category(category_name; country = \"\", limit = 20, offset = 0)\n\nSummary: Get a list of Spotify playlists tagged with a particular category.\n\nArguments\n\ncategory_name   : The unique string identifying the Spotify category, e.g. \"dinner\", \"party\" etc.\n\nOptional keywords\n\ncountry       : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                   the list of returned items to be relevant to a particular country.                   If omitted, the returned items will be relevant to all countries.\nlimit         : Maximum number of items to return, default is set to 20\noffset        : Index of the first item to return, default is set to 0\n\nExample\n\njulia> playlist_get_category(\"party\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n:playlists => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Episodes","page":"Endpoints","title":"Episodes","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"episodes\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.episodes_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_contains","text":"episodes_get_contains(episode_ids)\n\nSummary: Check if one or more episodes is already saved in the current Spotify user's 'Your Episodes' library.              This API endpoint is in beta and could change without warning.\n\nArguments\n\nids : A comma-separated list of the Spotify episode IDs\n\nExample\n\njulia> episodes_get_contains([\"77o6BIVlYM3msb4MMIL1jH\", \"0Q86acNRm6V9GYx55SXKwf\"])[1]\n\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_multiple","text":"episodes_get_multiple(episode_ids; market = get_user_country())\n\nSummary: Get Spotify catalog information for several episodes based on their Spotify IDs.\n\nArguments\n\nepisode_ids : A comma-separated list of the Spotify IDs for the episodes. Maximum: 50 IDs.\n\nOptional keywords\n\nmarket : Default: getusercountry().            An ISO 3166-1 alpha-2 country code. If a country code is specified, only content            that is available in that market will be returned. If a valid user access token            is specified in the request header, the country associated with the user account            will take priority over this parameter. Note: If neither market or user country            are provided, the content is considered unavailable for the client.            Users can view the country that is associated with their account in the account settings.\n\nExample\n\njulia> episodes_get_multiple([\"77o6BIVlYM3msb4MMIL1jH\", \"0Q86acNRm6V9GYx55SXKwf\"])[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :episodes => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.episodes_get_saved","text":"episodes_get_saved(;limit = 20, market = \"\", offset = 0)\n\nSummary: Get a list of the episodes saved in the current Spotify user's library.              This API endpoint is in beta and could change without warning.\n\nOptional keywords\n\nlimit  : Maximum number of items to return, default is set to 20\nmarket : An ISO 3166-1 alpha-2 country code. If a country code is specified, only content            that is available in that market will be returned. If a valid user access token            is specified in the request header, the country associated with the user account            will take priority over this parameter. Note: If neither market or user country            are provided, the content is considered unavailable for the client.            Users can view the country that is associated with their account in the account settings.\noffset : Index of the first item to return, default is set to 0\n\nExample\n\n```julia-repl julia> episodesgetsaved()[1]\n\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:   :href     => \"https://api.spotify.com/v1/me/episodes?offset=0&limit=20&market=US\"   :items    => Union{}[]   :limit    => 20\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.episodes_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.episodes_get_single","text":"episodes_get_single(episode_id; market = get_user_country())\n\nSummary: Get Spotify catalog information for a single episode identified by its unique Spotify ID.\n\nArguments\n\nepisode_id : The Spotify ID for the episode_id\n\nOptional keywords\n\nmarket : Default is get_user_country().            An ISO 3166-1 alpha-2 country code. If a country code is specified, only content            that is available in that market will be returned. If a valid user access token            is specified in the request header, the country associated with the user account            will take priority over this parameter. Note: If neither market or user country            are provided, the content is considered unavailable for the client.            Users can view the country that is associated with their account in the account settings.\n\nExample\n\njulia> episodes_get_single(\"512ojhOuo1ktJprKbVcKyQ\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 19 entries:\n  :audio_preview_url    => \"https://p.scdn.co/mp3-preview/566fcc94708f39bcddc09e4ce84a8e5db8f07d4d\"\n  :description          => \"En ny tysk bok granskar för första gången Tredje rikets drogberoende, från Führerns k…\n  :duration_ms          => 1502795\n  :explicit             => false\n  :external_urls        => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_episodes-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_episodes","text":"show_get_episodes(show_id; market = get_user_country(), limit = 20, offset = 0)\n\nSummary: Get Spotify catalog information about a show’s episodes. Optional parameters              can be used to limit the number of episodes returned.\n\nArguments\n\nshow_id : The Spotify ID for the show\n\nOptional keywords\n\nmarket         : An ISO 3166-1 alpha-2 country code. If market is not provided, the content                    is considered unavailable for the client.                    Default value is taken from user's .ini file.\nlimit          : Maximum number of items to return, default is set to 20. (0 < limit <= 50)\noffset         : Index of the first item to return, default is set to 0\n\nExample\n\njulia> ses = show_get_episodes(\"2MAi0BvDc6GTFvKFPXnkCL\")[1];\n\njulia> [s.name for s in ses.episodes.items]\n50-element Vector{String}:\n \"#359 – Andrew Strominger: Black\" ⋯ 17 bytes ⋯ \"ravity, and Theoretical Physics\"\n \"#358 – Aella: Sex Work, OnlyFans, Porn, Escorting, Dating, and Human Sexuality\"\n \"#357 – Paul Conti: Narcissism, \" ⋯ 18 bytes ⋯ \"and the Nature of Good and Evil\"\n \"#356 – Tim Dodd: SpaceX, Starship, Rocket Engines, and Future of Space Travel\"\n \"#355 – David Kipping: Alien Civilizations and Habitable Worlds\"\n \"#354 – Jeremi Suri: American Civil War\"\n ⋮\n \"#315 – Magnus Carlsen: Greatest Chess Player of All Time\"\n \"#314 – Liv Boeree: Poker, Game \" ⋯ 18 bytes ⋯ \"tion, Aliens & Existential Risk\"\n \"#313 – Jordan Peterson: Life, Death, Power, Fame, and Meaning\"\n \"#312 – Duncan Trussell: Comedy, Sentient Robots, Suffering, Love & Burning Man\"\n \"#311 – Magatte Wade: Africa, Capitalism, Communism, and the Future of Humanity\"\n \"#310 – Andrew Bustamante: CIA Spy\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Follow","page":"Endpoints","title":"Follow","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"follow\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.users_check_current_follows-Tuple{Any}","page":"Endpoints","title":"Spotify.users_check_current_follows","text":"users_check_current_follows(item_type, ids)\n\nSummary: Check to see if the current user is following one or more artists or other Spotify users.\n\nArguments\n\nids Required:     - A comma separated list of the artist. Maximum 50.                       - a single user.\nitem_type Optional: The ID type, either artist (default) or user.\n\nExample\n\njulia> users_check_current_follows([\"0YC192cP3KPCRWx8zr8MfZ\"])[1]\n1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n\n julia> users_check_current_follows(\"smedjan\"; item_type = \"user\")[1]\n 1-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n  0\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_check_follows_playlist-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.users_check_follows_playlist","text":"users_check_follows_playlist(playlist_id, user_id)\n\nSummary: Check to see if one or more Spotify users are following a specified playlist_id.\n\nArguments\n\nplaylist_id Required: The Spotify ID of the playlist.\nuser_id Required: A comma separated list of the user Spotify IDS to check. Maximum 5.\n\nExample\n\njulia> users_check_follows_playlist(\"3cEYpjA9oz9GiPac4AsH4n\", [\"jmperezperez\", \"thelinmichael\", \"wizzler\"])[1]\n3-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 1\n 0\n 0\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_follow_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.users_follow_playlist","text":"users_follow_playlist(playlist_id; public = false)\n\nSummary: Add the current user as a follower of a playlist.\n\nArgument\n\n-playlist_id: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nOptional argument\n\npublic:     Defaults to false. If true the playlist will be included in user's public playlists,               if false it will remain private.\n\nReference\n\nExample\n\njulia> playlist_id = SpPlaylistId(\"37i9dQZF1DX1rVvRgjX59F\")\nspotify:playlist:37i9dQZF1DX1rVvRgjX59F\n\njulia> users_follow_playlist(playlist_id)[1]\n{}\n\njulia> users_unfollow_playlist(playlist_id)[1] # Cleanup\n{}\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_get_follows-Tuple{}","page":"Endpoints","title":"Spotify.users_get_follows","text":"users_get_follows(; limit = 20, after = \"\")\n\nSummary: Get the current user's followed artists.\n\nArguments\n\nlimit Optional: The maximum number of items to return. Default 20, Minimum 1, Maximum 50.\nafter Optional: The last artist ID retrieved from the previous request.\n\nExample\n\njulia> o = users_get_follows(;limit = 10)[1];\n\njulia> anames = [s.name for s in o.artists.items];\n\njulia> while rem(length(anames), 10)  == 0\n           id =  o.artists.items[end].id\n           o = users_get_follows(;after = id)[1]\n           anames = vcat(anames, [s.name for s in o.artists.items])\nend\n\njulia> julia> length(anames)\n26\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_unfollow_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.users_unfollow_playlist","text":"users_unfollow_playlist(playlist_id)\n\nSummary: Remove the current user as a follower of a playlist. If none are following, this substitutes for 'delete'.\n\nplaylist_id Required: The Spotify ID of the playlist. Any playlist can be followed regardless of it's private/public status, as long as the ID is known.\n\nArguments\n\nplaylist_id The Spotify ID of the playlist.\n\nExample\n\nTo be run after example in playlist_create_playlist, possibly also 'playlistremoveplaylist_item`.\n\njulia> users_unfollow_playlist(myownplaylistid)[1]\n{}\n\nAlso see users_follow_playlist\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Genres","page":"Endpoints","title":"Genres","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"genres\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.genres_get-Tuple{}","page":"Endpoints","title":"Spotify.genres_get","text":"genres_get()\n\nSummary: Retrieve a list of available genres seed parameter values for recommendations.\n\nExample\n\njulia> genres_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :genres => [\"acoustic\", \"afrobeat\", \"alt-rock\", \"alternative\", \"ambient\", \"anime\", \"black-metal\",…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Library","page":"Endpoints","title":"Library","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Endpoints referenced here are included in the library section. These functions act on whoever has authorized their account to be queried. They can answer questions like","category":"page"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"library\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.library_check_saved_shows-Tuple{Any}","page":"Endpoints","title":"Spotify.library_check_saved_shows","text":"Alias for showgetcontains in shows.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_check_saved_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.library_check_saved_tracks","text":"Alias for tracksgetcontains in tracks.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_get_saved_shows-Tuple{}","page":"Endpoints","title":"Spotify.library_get_saved_shows","text":"Alias for showgetsaved in shows.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_get_saved_tracks-Tuple{}","page":"Endpoints","title":"Spotify.library_get_saved_tracks","text":"Alias for tracksgetsaved in tracks.jl\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_remove_shows-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_shows","text":"Same as showremovefrom_library\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_remove_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.library_remove_tracks","text":"Same as tracksremovefrom_library\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_show-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_show","text":"Same as showsavelibrary\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.library_save_track-Tuple{Any}","page":"Endpoints","title":"Spotify.library_save_track","text":"Same as trackssavelibrary\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_remove_from_library-Tuple{Any}","page":"Endpoints","title":"Spotify.show_remove_from_library","text":"show_remove_from_library(show_ids)\n\nSummary: Remove one or more shows for the current user's library.\n\nshow_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nExample\n\njulia> show_remove_from_library([\"5AvwZVawapvyhJUIx71pdJ\", \"6ups0LMt1G8n81XLlkbsPo\"])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_save_library-Tuple{Any}","page":"Endpoints","title":"Spotify.show_save_library","text":"show_save_library(show_ids)\n\nSave Shows for Current User\n\n** Summary**: Save one or more shows to the current user's library.\n\nshow_ids Required: A comma-separated list of Spotify IDs. Maximum 50.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_remove_from_library-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_remove_from_library","text":"tracks_remove_from_library(track_ids)\n\nSummary: Remove one or more tracks for the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of the Spotify IDs. Maximum 50.\n\nExample\n\njulia> tracks_remove_from_library([\"0WdUHon5tYn2aKve13psfy\", \"619OpJGKpAOrp5rM4Gcs65\"])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_save_library-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_save_library","text":"tracks_save_library(track_ids)\n\n** Summary**: Save one or more tracks to the current user's 'Your Music' library.\n\ntrack_ids Required: A comma-separated list of Spotify IDs. Maximum 50.\n\nExample\n\njulia> tracks_save_library([\"0WdUHon5tYn2aKve13psfy\", \"619OpJGKpAOrp5rM4Gcs65\"])[1]\n{}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Markets","page":"Endpoints","title":"Markets","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"markets\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.markets_get-Tuple{}","page":"Endpoints","title":"Spotify.markets_get","text":"markets_get()\n\nSummary: Get the list of markets where Spotify is available.\n\nExample\n\njulia> markets_get()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :markets => [\"AD\", \"AE\", \"AG\", \"AL\", \"AM\", \"AO\", \"AR\", \"AT\", \"AU\", \"AZ\"  …\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Playlists","page":"Endpoints","title":"Playlists","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"playlist\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.playlist_add_tracks_to_playlist-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.playlist_add_tracks_to_playlist","text":"playlist_add_tracks_to_playlist(playlist_id, track_ids; position = -1)\n\nSummary: Add one or more items to a user's playlist.\n\nArguments\n\nplaylist_id:  The Spotify ID of the playlist.\ntrack_ids:   A maximum of 100 items can be added in one request.\n\nOptional keywords\n\nposition:     The position to insert the items, a zero-based index.   For example, to insert the items in the first position: position = 0;   to insert the items in the third position: position = 2.   The default value is -1, meaning we omit the argument in the API call.   When omitted, the items will be appended to the playlist. Items are added in the order they   are listed in the query string or request body.\n\nExample (continued from playlist_create_playlist)\n\njulia> track_ids = SpTrackId.([\"4m6P9J3czb5hiMIuNsWeVO\", \"619OpJGKpAOrp5rM4Gcs65\"])\n2-element Vector{SpTrackId}:\n spotify:track:4m6P9J3czb5hiMIuNsWeVO\n spotify:track:619OpJGKpAOrp5rM4Gcs65\n\njulia> playlist_add_tracks_to_playlist(myownplaylistid, track_ids)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :snapshot_id => \"Myw3OTkwNGExNzExNjA2ZWRhMDBkYjgwOWEwNzgzNGY2ZTRiODU3ZTkz\"\n\njulia> # Cleanup: See `playlist_remove_playlist_item`\n\nOr, for one of your own playlists,\n\njulia> function get_my_own_playlist()\n            pls = playlist_get_current_user()[1]\n            for p in pls.items\n                if p.owner.id == Spotify.get_user_name()\n                    return p\n                end\n            end\n            nothing\n        end\njulia> myownplaylistid = get_my_own_playlist().id |> SpPlaylistId\nspotify:playlist:6VX6WsbD9CpEGMAxuQEbm3\n\njulia> track_ids = SpTrackId.([\"4m6P9J3czb5hiMIuNsWeVO\", \"619OpJGKpAOrp5rM4Gcs65\"]);\n\njulia> playlist_add_tracks_to_playlist(myownplaylistid, track_ids)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :snapshot_id => \"MTEsOWE1MjA0M2IxMDlhYjFjM2M2OGE0YTBlOWM4MTY1OGVjYWU2NWQxMw==\"\n\njulia> # Cleanup: See `playlist_remove_playlist_item`\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_change_details-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_change_details","text":"Summary: Change a playlist's name and public/private state. (The user must, of course, own the playlist.)\n\nArguments\n\nplaylist_id   : Alphanumeric ID of the playlist\n\nOptional keywords\n\nname           The new name for the playlist. Default: Argument not sent.\npublic         If true the playlist will be public, if false it will be private. Default: Argument not sent.\ncollaborative  If true, the playlist will become collaborative and other users will be able to modify the playlist in their Spotify client.                  Note: You can only set collaborative to true on non-public playlists. Default: Argument not sent.\ndescription    Value for playlist description as displayed in Spotify Clients and in the Web API. Default: Argument not sent.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_create_playlist-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_create_playlist","text":"playlist_create_playlist(playlist_name; user_id = get_user_name(), public = true, collaborative = false, description = \"\")\n\nSummary: Create a playlist for a Spotify user. (The playlist will be empty until you add tracks.)\n\nArguments\n\nplaylist_name :   The name for the new playlist, for example \"Your Coolest Playlist\". This name does not need to be unique; a user may have several playlists with the same name.\n\nOptional keywords\n\nuser_id                 Defaults to getusername(), from the .ini file\npublic::Boolean         Defaults to true. If true the playlist will be public, if false it will be private. To be able to create private playlists, the user must have granted the playlist-modify-private scope\ncollaborative::Boolean  Defaults to false. If true the playlist will be collaborative. Note: to create a collaborative playlist you must also set public to false. To create collaborative playlists you must have granted playlist-modify-private and playlist-modify-public scopes.\ndescription     Value for playlist description as displayed in Spotify Clients and in the Web API.\n\nExample\n\njulia> description = \"Songs about orcs learning to code after being laid off from the mines of Mordor\";\n\njulia> playlist = playlist_create_playlist(\"Temporary private playlist\"; description)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 15 entries:\n  :collaborative => false\n  :description   => nothing\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/playlists/6VX6WsbD9CpEGMAxuQEbm3\"\n  ⋮              => ⋮\n\njulia> myownplaylistid = playlist.id |> SpPlaylistId\nspotify:playlist:0akFdMBfiqbkAUSY5hTYKs\n\njulia> # Cleanup: See `playlist_add_tracks_to_playlist`, or skip straight to `Spotify.Users.users_unfollow_playlist`\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get","text":"playlist_get(playlist_id; additional_types = \"track\", fields = \"\",\nmarket = \"\")\n\nSummary: Get details about a playlist owned by a Spotify user.        NOTE 1: For private playlists with > 100 tracks, use playlist_get_tracks instead.       NOTE 2: For public playlists with > 50 tracks, don't expect to see beyound 50.\n\nArguments\n\nplaylist_id : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types: \"track\" (default) or \"episode\"\nfields         : Filters for the query, a comma-separated list of the fields to return.                   For example, to get just the added date and user ID of the adder,                   fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                   all fields are returned.\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                   only episodes that are available in that market will be returned.                   Default is set to \"US\".\n\nExample\n\nThis works with severe limitations to the number of tracks returned.\n\njulia-repl   julia> using Spotify, Spotify.Playlists   julia> playlist_get(\"37i9dQZF1E4vUblDJbCkV3\")[1]   JSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 15 entries:     :collaborative => false     :description   => \"With Roo Panes, Hiss Golden Messenger, Nathaniel Rateliff and more\"     :external_urls => {…     :followers     => {…     :href          => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3?additional_types=track\"     :id            => \"37i9dQZF1E4vUblDJbCkV3\"     :images        => JSON3.Object[{…     :name          => \"Lord Huron Radio\"     :owner         => {…     :primary_color => nothing     :public        => false     :snapshot_id   => \"MTYzNTg2NzMxNCwwMDAwMDAwMGU3MTgwNDkzOWE5NTQ2NGM1NmYzNTYyZDhhZTc1ZGNh\"     :tracks        => {…     :type          => \"playlist\"     :uri           => \"spotify:playlist:37i9dQZF1E4vUblDJbCkV3\"\n\n# Example, general use\n\n```julia-repl\njulia> @time let\n    playlist_id = SpPlaylistId(\"37i9dQZF1E4vUblDJbCkV3\") # public, meets limitations.\n    playlist_id = SpPlaylistId(\"3FyJWXqFocKq2SYGjGoelU\") # private, this works with up to 100 tracks.\n    fields = \"name,tracks(total)\"\n    pll = playlist_get(playlist_id; fields)[1];\n    # This returns 50 in longer playlists, except when the playlist is your own.\n    ntot = pll.tracks.total  \n    if ntot < 101\n        println(\"Retrieving all \", ntot, \" tracks from \", pll.name)\n    else\n        println(\"Unable to retrieva all \", ntot, \" tracks. Refer to `playlist_get_tracks`\")\n    end\n    # We unnecessarily limit the data returned here. It does not help with the upper limit.\n    fields = \"tracks(items(track(id,name)),next)\"\n    o, waitsec = playlist_get(playlist_id; fields);\n    track_names = o.tracks.items .|> i -> i.track.name |> string\n    track_ids = o.tracks.items .|> i -> i.track.id |> SpTrackId\nend;\nUnable to retrieva all 529 tracks. Refer to `playlist_get_tracks`\n\n0.837955 seconds (612.52 k allocations: 30.531 MiB, 1.90% gc time, 17.00% compilation time)     ```\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_cover_image-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_cover_image","text":"playlist_get_cover_image(playlist_id)\n\nSummary: Get the current image associated with a specific playlist.\n\nArguments\n\nplaylist_id : Alphanumeric ID of the playlist\n\nExample\n\njulia> playlist_get_cover_image(\"37i9dQZF1E4vUblDJbCkV3\")[1]\n1-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n{\n\"height\": nothing,\n    \"url\": \"https://seeded-session-images.scdn.co/v1/img/artist/6ltzsmQQbmdoHHbLZ4ZN25/en\",\n    \"width\": nothing\n}\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_current_user-Tuple{}","page":"Endpoints","title":"Spotify.playlist_get_current_user","text":"playlist_get_current_user(limit = 20, offset = 0)\n\nSummary: Get a list of the playlists owned or followed by the current Spotify user.\n\nOptional keywords\n\nlimit          : Maximum number of items to return, default is set to 20. Minimum: 1. Maximum: 50.\noffset         : Index of the first item to return, default is set to 0\n\nExample\n\njulia> playlist_get_current_user()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n:href     => \"https://api.spotify.com/v1/users/your_user_id/playlists?offset=0&limit=20\"\n:items    => JSON3.Object[{…\n:limit    => 20\n:next     => nothing\n:offset   => 0\n:previous => nothing\n:total    => 2\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_featured-Tuple{}","page":"Endpoints","title":"Spotify.playlist_get_featured","text":"playlist_get_featured(;country = \"\", limit = 20, locale = \"\",\n                           offset = 0, timestamp = now())\n\nSummary: Get a list of Spotify featured playlists (shown, for example, on a Spotify player's 'Browse' tab).\n\nOptional keywords\n\ncountry       : An ISO 3166-1 alpha-2 country code. Provide this parameter if you want                   the list of returned items to be relevant to a particular country.                   If omitted, the returned items will be relevant to all countries.\nlimit          : Maximum number of items to return, default is set to 20\nlocale         : The desired language, consisting of a lowercase ISO 639-1 language code and an uppercase                   ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \"Spanish (Mexico)\".                   Provide this parameter if you want the results returned in a particular language (where available).\noffset         : Index of the first item to return, default is set to 0\ntimestamp      : A timestamp in ISO 8601 format: yyyy-MM-ddTHH:mm:ss. Use this parameter to specify the user's local time                    to get results tailored for that specific date and time in the day. Default is set to user's current time.\n\nExample\n\njulia> playlist_get_featured(locale = \"en_UK\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n:message   => \"Tuesday jams\"\n:playlists => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_tracks-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_tracks","text":"playlist_get_tracks(playlist_id; additional_types = \"track\", limit = 50,\noffset = 0, market = \"\")\n\nSummary: Get details about the items of a playlist. NOTE: requires several calls for long lists.\n\nArguments\n\nplaylist_id   : Alphanumeric ID of the playlist\n\nOptional keywords\n\nadditional_types : \"track\" (default) or \"episode\"\nfields : Filters for the query, a comma-separated list of the fields to return.                   For example, to get just the added date and user ID of the adder,                   fields = \"items(addedat,addedby.id)\". Default is set to \"\", which means                   all fields are returned.\nlimit          : Maximum number of items to return, default is set to 20. Minimum: 1. Maximum: 50.\noffset         : Index of the first item to return, default is set to 0\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                   only episodes that are available in that market will be returned.                   Default is set to \"US\".\n\nExample\n\nFor fewer than 21 tracks:\n\njulia> playlist_get_tracks(\"37i9dQZF1E4vUblDJbCkV3\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n:href     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=0&limit=20&market=US&additional_types=…\n:items    => JSON3.Object[{…\n:limit    => 20\n:next     => \"https://api.spotify.com/v1/playlists/37i9dQZF1E4vUblDJbCkV3/tracks?offset=20&limit=20&market=US&additional_types…\n:offset   => 0\n:previous => nothing\n:total    => 50\n\nExample, general use\n\nFor longer playlists, we should ask for the fields we need only. The rate limits should be returned in 'waitsec', but this does not seem to work as documented  with long playlists not owned by user.\n\njulia> @time let\n    playlist_id = SpPlaylistId(\"37i9dQZF1E4vUblDJbCkV3\") # public, meets limitations at 50 items.\n    playlist_id = SpPlaylistId(\"3FyJWXqFocKq2SYGjGoelU\") # private, this works well.\n    fields = \"name,tracks(total)\"\n    pll = playlist_get(playlist_id; fields)[1];\n    ntot = pll.tracks.total\n    println(\"Retrieving all \", ntot, \" tracks from \", pll.name)\n    fields = \"items(track(name,id)),total, next\"\n    o, waitsec = playlist_get_tracks(playlist_id; fields, limit=100);\n    track_ids = o.items .|> i -> i.track.id |> SpTrackId\n    while o.next !== nothing\n        if waitsec > 0\n            println(\"waiting \", waitsec, \" s\")\n            sleep(waitsec)\n        else\n            print(\".\")\n        end\n        o, waitsec = playlist_get_tracks(playlist_id; offset = length(track_ids), fields, limit=100);\n        append!(track_ids, o.items .|> i -> i.track.id |> SpTrackId)\n    end\n    println(\"Found \", length(track_ids), \" tracks\")\n    track_ids\nend;\nRetrieving all 529 tracks from -- Liked from Radio --\n.....Found 529 tracks\n  2.669471 seconds (645.63 k allocations: 32.448 MiB, 4.26% compilation time)\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_get_user-Tuple{Any}","page":"Endpoints","title":"Spotify.playlist_get_user","text":"playlist_get_user(user_id; limit = 20, offset = 0)\n\nSummary: Get a list of the playlists owned or followed by a Spotify user.\n\nArguments\n\nuser_id : Alphanumeric ID of the user or name (e.g. \"smedjan\")\n\nOptional keywords\n\nlimit          : Maximum number of items to return, default is set to 20\noffset         : Index of the first item to return, default is set to 0\n\nExample\n\njulia> playlist_get_user(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n:href     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=0&limit=20\"\n:items    => JSON3.Object[{…\n:limit    => 20\n:next     => \"https://api.spotify.com/v1/users/smedjan/playlists?offset=20&limit=20\"\n:offset   => 0\n:previous => nothing\n:total    => 98\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.playlist_remove_playlist_item-Tuple{Any, Any}","page":"Endpoints","title":"Spotify.playlist_remove_playlist_item","text":"playlist_remove_playlist_item(playlist_id, track_ids)\n\nSummary: Remove one or more items from a user's playlist. For 'deleting playlists', see 'usersunfollowartists_users'.\n\nArguments\n\nplaylist_id The Spotify ID of the playlist.\ntrack_ids   A maximum of 100 items can be removed in one request.\n\nExample (to be run after examples in playlist_create_playlist and playlist_add_tracks_to_playlist.\n\njulia> playlist_remove_playlist_item(myownplaylistid, track_ids)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :snapshot_id => \"NCwwNWI4YjdjODk5OWI1MGRlZTIzYjdjYzY4ZDhkMzczZDMyYzQ1YTRl\"\n\njulia> # Cleanup: This example is continued under `Spotify.Users.users_unfollow_playlist`.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Search","page":"Endpoints","title":"Search","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"search\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.search_get-Tuple{Any}","page":"Endpoints","title":"Spotify.search_get","text":"search_get(q; item_type = \"track,artist\", include_external = \"\",\n                limit = 20, market = \"\", offset = 0)\n\nSummary: Get Spotify catalog information about albums, artists, playlists, tracks,              shows or episodes that match a keyword string. Note: Audiobooks are only              available for the US, UK, Ireland, New Zealand and Australia markets.\n\nArguments\n\nq                 : Search query, e.g. \"Coldplay\".\n\nOptional keywords arguments\n\ntype :         A comma-separated list of item types to search across. Search results include                  hits from all the specified item types. For example, item_type = \"album,tarck\" returns                  both albums and tracks with the search query included in their name.\ninclude_external : If include_external = \"audio\" is specified then the response will include any                              relevant audio content that is hosted externally.\nlimit          : Maximum number of items to return, default is set to 20\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                       only episodes that are available in that market will be returned.                       Default is set to \"US\".\noffset         : Index of the first item to return, default is set to 0\n\nExample\n\njulia> search_get(\"Coldplay\")[1]\n     GET https://api.spotify.com/v1/search?q=Coldplay&type=track,artist&include_external=&limit=20&market=US&offset=0\n     scopes in current credentials: String[]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :artists => {…\n  :tracks  => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Shows","page":"Endpoints","title":"Shows","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"show\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.show_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_contains","text":"show_get_contains(show_ids)\n\nSummary: Check if one or more shows is already saved in the current Spotify user's library.\n\nArguments\n\nids : A comma-separated list of the Spotify IDs for the shows. Maximum: 50 IDs.\n\nExample\n\njulia> show_ids = SpShowId.([\"5AvwZVawapvyhJUIx71pdJ\", \"6ups0LMt1G8n81XLlkbsPo\"])\n2-element Vector{SpShowId}:\n spotify:show:5AvwZVawapvyhJUIx71pdJ\n spotify:show:6ups0LMt1G8n81XLlkbsPo\n\njulia> show_get_contains(show_ids)[1]\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 1\n 1\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_multiple","text":"show_get_multiple(ids; market = get_user_country())\n\nSummary: Get Spotify catalog information for several shows based on their Spotify IDs.\n\nArguments\n\nshow_ids : A comma-separated list of the Spotify IDs for the shows. Maximum: 50 IDs.\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows            and episodes that are available in that market will be returned. If market is            not provided, the content is considered unavailable for the client.            Default value is taken from user's .ini file.\n\nExample\n\njulia> julia> show_ids = SpShowId.([\"5AvwZVawapvyhJUIx71pdJ\", \"6ups0LMt1G8n81XLlkbsPo\"])\n2-element Vector{SpShowId}:\n spotify:show:5AvwZVawapvyhJUIx71pdJ\n spotify:show:6ups0LMt1G8n81XLlkbsPo\n\njulia> shs = show_get_multiple(show_ids)[1];\n\njulia> [s.name for s in shs.shows]\n3-element Vector{String}:\n \"The Giant Beastcast\"\n \"The Filmcast (AKA The Slashfilmcast)\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.show_get_saved","text":"show_get_saved(;limit = 20, offset = 0)\n\nSummary: Get a list of shows saved in the current Spotify user's library. Optional parameters can              be used to limit the number of shows returned.\n\nOptional keywords\n\nlimit          : Maximum number of items to return, default is set to 20. (0 < limit <= 50)\noffset         : Index of the first item to return, default is set to 0\n\nExample\n\njulia> show_get_saved()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/shows?offset=0&limit=20\"\n  :items    => Union{}[]\n  :limit    => 20\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.show_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.show_get_single","text":"show_get(show_id; market = get_user_country())\n\nSummary: Get a Spotify catalog information for a single show identified by it's unique Spotify ID.\n\nArguments\n\nshow_id : The Spotify ID for the show\n\nOptional keywords\n\nmarket : An ISO 3166-1 alpha-2 country code. If a country code is specified, only shows            and episodes that are available in that market will be returned. If market is            not provided, the content is considered unavailable for the client.            Default value is taken from user's .ini file.\n\nExample\n\njulia> show_get_single(\"2MAi0BvDc6GTFvKFPXnkCL\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :available_markets    => [\"AD\", \"AE\", \"AG\", \"AL\", \"AM\", \"AR\", \"AT\", \"AU\", \"BA\", \"BB\"  …  \"TV\", \"TW\", \"US\", \"UY\", \"VC\", …\n  :copyrights           => Union{}[]\n  :description          => \"Conversations about science, technology, history, philosophy and the nature of intelligence, …\n  :episodes             => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Tracks","page":"Endpoints","title":"Tracks","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"tracks\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.player_get_recent_tracks-Tuple{}","page":"Endpoints","title":"Spotify.player_get_recent_tracks","text":"player_get_recent_tracks(;duration = 1, limit = 20)\n\nSummary: Get current user's recently played tracks.\n\nOptional keywords\n\nduration : Number of days to look in the past, default is set to 1\nlimit : Maximum number of items to return, default is set to 20\n\nExample\n\njulia> player_get_recent_tracks()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 5 entries:\n  :items   => JSON3.Object[{…\n  :next    => \"https://api.spotify.com/v1/me/player/recently-played?after=1636123644988&limit=20\"\n  :cursors => {…\n  :limit   => 20\n  :href    => \"https://api.spotify.com/v1/me/player/recently-played?after=1636410050&limit=20\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_audio_analysis-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_audio_analysis","text":"tracks_get_audio_analysis(track_id)\n\nSummary: Get a detailed audio analysis for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id: The Spotify ID for the track\n\nExample\n\njulia> tracks_get_audio_analysis(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :meta     => {…\n  :track    => {…\n  :bars     => JSON3.Object[{…\n  :beats    => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_audio_features-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_audio_features","text":"tracks_get_audio_features(track_id)\n\nSummary: Get audio feature information for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id: The Spotify ID for the track\n\nExample\n\njulia> tracks_get_audio_features(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :danceability     => 0.592\n  :energy           => 0.0196\n  :key              => 1\n  :loudness         => -33.35\n  :mode             => 1\n  :speechiness      => 0.0358\n  :acousticness     => 0.362\n  :instrumentalness => 0.854\n\nResult parameters\n\nacousticness\n\nA confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\n\nanalysis_url\n\nA URL to access the full audio analysis of this track. An access token is required to access this data.\n\ndanceability\n\nDanceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\n\nduration_ms\n\nThe duration of the track in milliseconds.\n\nenergy\n\nEnergy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\n\nid\n\nThe Spotify ID for the track.\n\ninstrumentalness\n\nPredicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.\n\nkey\n\n= -1, <= 11\n\nThe key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1.\n\nliveness\n\nDetects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\n\nloudness\n\nThe overall loudness of a track in decibels (dB). Loudness values are averaged across the entire track and are useful for comparing relative loudness of tracks. Loudness is the quality of a sound that is the primary psychological correlate of physical strength (amplitude). Values typically range between -60 and 0 db.\n\nmode\n\nMode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived. Major is represented by 1 and minor is 0.\n\nspeechiness\n\nSpeechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\n\ntempo\n\nThe overall estimated tempo of a track in beats per minute (BPM). In musical terminology, tempo is the speed or pace of a given piece and derives directly from the average beat duration.\n\ntime_signature\n\n= 3, <= 7\n\nAn estimated time signature. The time signature (meter) is a notational convention to specify how many beats are in each bar (or measure). The time signature ranges from 3 to 7 indicating time signatures of \"3/4\", to \"7/4\".\n\ntrack_href\n\nA link to the Web API endpoint providing full details of the track.\n\ntype\n\nThe object type. Allowed value: \"audio_features\"\n\nuri\n\nThe Spotify URI for the track.\n\nvalence\n\n= 0, <= 1\n\nA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_contains-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_contains","text":"tracks_get_contains(ids)\n\nSummary: Check if one or more tracks is already saved in the current Spotify user's 'Your Music' library.\n\nArguments\n\nids : A comma-separated list of the Spotify track IDs.\n\nExample\n\njulia> tracks_get_contains(\"4iV5W9uYEdYUVa79Axb7Rh, 4VqPOruhp5EdPBeR92t6lQ\")[1]\n2-element JSON3.Array{Bool, Base.CodeUnits{UInt8, String}, Vector{UInt64}}:\n 0\n 0\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_multiple-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_multiple","text":"tracks_get_multiple(track_ids, market = \"\")\n\nSummary: Get Spotify catalog information for multiple tracks based on their Spotify IDs.\n\nArguments\n\ntrack_ids : A comma-separated list of the Spotify IDs.\n\nOptional keywords\n\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                    only episodes that are available in that market will be returned.\n\nExample\n\njulia> tracks_get_multiple([\"7ouMYWpwJ422jRcDASZB7P\", \"4VqPOruhp5EdPBeR92t6lQ\", \"2takcwOaAZWiXQijPHIx7B\"])[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :tracks => Union{Nothing, JSON3.Object}[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_recommendations-Tuple{Dict}","page":"Endpoints","title":"Spotify.tracks_get_recommendations","text":"tracks_get_recommendations(seeds_dict::Dict;\n    track_attributes::Dict = Dict{String, String}(), limit = 50, market = \"\")\n\nSummary: Get Recommendations based on Seeds\n\nOptional keywords\n\nseeds_dict       : A dictionary containing keys (seedgenres, seedartists, seedtracks) and values for each key being seeds        delimited by a comma up to 5 seeds for each category.       Up to 5 seed values may be provided in any combination of seedartists, seedtracks and seedgenres.           For example:        Dict(\"seedartists\" => \"s33dart1st,s33edart!st2\", \"seedgenres\" => \"g3nre1,genr32\", \"seed_tracks\" => \"trackid1,trackid2\")\ntrack_attributes : A dictionary containing key values for ≈ 50 tunable track track_attributes, see reference.\nlimit            : Maximum number of items to return, default is set to 20\nmarket           : An ISO 3166-1 alpha-2 country code. If a country code is specified,                    only episodes that are available in that market will be returned.\n\nReference\n\n(https://developer.spotify.com/documentation/web-api/reference/#/operations/get-recommendations)\n\nExample\n\njulia> seeds_dict = Dict(\"seed_artists\" => \"0YC192cP3KPCRWx8zr8MfZ\")\nDict{String, String} with 1 entry:\n  \"seed_artists\" => \"0YC192cP3KPCRWx8zr8MfZ\"\n\njulia> track_attributes = Dict(\"max_danceability\" => \"0.80\")\nDict{String, String} with 1 entry:\n  \"max_danceability\" => \"0.80\"\n\njulia> tracks_get_recommendations(seeds_dict; track_attributes)[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :tracks => JSON3.Object[{…\n  :seeds  => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_saved-Tuple{}","page":"Endpoints","title":"Spotify.tracks_get_saved","text":"tracks_get_saved(;limit = 20, market = \"\", offset = 0)\n\nSummary: Get a list of the songs saved in the current Spotify user's 'Your Music' library.\n\nOptional keywords\n\nlimit          : Maximum number of items to return, default is set to 20\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                    only episodes that are available in that market will be returned.\noffset : Index of the first item to return, default is set to 0\n\nExample\n\njulia> tracks_get_saved()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :href     => \"https://api.spotify.com/v1/me/tracks?offset=0&limit=20&market=US\"\n  :items    => JSON3.Object[{…\n  :limit    => 20\n  :next     => \"https://api.spotify.com/v1/me/tracks?offset=20&limit=20&market=US\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.tracks_get_single-Tuple{Any}","page":"Endpoints","title":"Spotify.tracks_get_single","text":"tracks_get(track_id; market = \"\")\n\nSummary: Get a spotify catalog information for a single track identified by it's unique Spotify ID.\n\nArguments\n\ntrack_id : The Spotify ID for the track.\n\nOptional keywords\n\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                    only episodes that are available in that market will be returned.\n\nExample\n\njulia> tracks_get(\"6rqhFgbbKwnb9MLmUQDhG6\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 18 entries:\n  :album         => {…\n  :artists       => JSON3.Object[{…\n  :disc_number   => 1\n  :duration_ms   => 65314\n  :explicit      => true\n  :external_ids  => {…\n  :external_urls => {…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Users","page":"Endpoints","title":"Users","text":"","category":"section"},{"location":"endpoints.html","page":"Endpoints","title":"Endpoints","text":"Modules = [Spotify]\nOrder = [:function]\nFilter = t -> contains(String(Symbol(t)), \"user\") == true\nPrivate = true","category":"page"},{"location":"endpoints.html#Spotify.users_get_current_profile-Tuple{}","page":"Endpoints","title":"Spotify.users_get_current_profile","text":"users_get_current_profile()\n\n**Summary**: Get detailed profile information about the current user\n            (including the current user's username).\n\nThe returned object contains more info when granted scopes: user-read-private and  user-read-email.\n\nExample\n\njulia> users_get_current_profile()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 12 entries:\n  :country          => \"NL\"\n  :display_name     => \"Itachi\"\n  :email            => \"your_id@gmail.com\"\n  :explicit_content => {…\n  :external_urls    => {…\n  :followers        => {…\n  :href             => \"https://api.spotify.com/v1/users/your_user_id\"\n  :id               => \"your_user_id\"\n  :images           => Union{}[]\n  :product          => \"premium\"\n  :type             => \"user\"\n  :uri              => \"spotify:user:your_user_id\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_get_current_user_top_items-Tuple{}","page":"Endpoints","title":"Spotify.users_get_current_user_top_items","text":"users_get_current_user_top_items(;type = \"artists\", time_range = \"medium_term\", limit = 20, offset = 0)\n\nSummary: Get the current user's top artists or tracks based on calculated affinity.\n\nOptional keywords\n\ntype        : The type of entity to return. Valid values: \"artists\" or \"tracks\". Default: \"artists\".\nlimit       : The maximum number of items to return. Default is set to 20. The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.\noffset      : The index of the first item to return. Default is 0.\ntime_range  : Over what time frame the affinities are computed.   Valid values: longterm (calculated from several years of data and including all   new data as it becomes available), mediumterm (approximately last 6 months),   shortterm (approximately last 4 weeks). Default: \"mediumterm\".\n\nExample\n\njulia> users_get_current_user_top_items()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :items    => JSON3.Object[{…\n  :total    => 50\n  :limit    => 20\n  :offset   => 0\n  :previous => nothing\n  :href     => \"https://api.spotify.com/v1/me/top/artists\"\n  :next     => \"https://api.spotify.com/v1/me/top/artists?limit=20&offset=20\"julia> users_get_current_user_top_items(limit=1, type=\"tracks\")[1].items;\n\nThe above used the default 'type' argument. We can also look for tracks:\n\njulia> users_get_current_user_top_items(type=\"tracks\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :items    => JSON3.Object[{…\n  :total    => 50\n  :limit    => 20\n  :offset   => 0\n  :previous => nothing\n  :href     => \"https://api.spotify.com/v1/me/top/tracks\"\n  :next     => \"https://api.spotify.com/v1/me/top/tracks?limit=20&offset=20\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"endpoints.html#Spotify.users_get_profile-Tuple{Any}","page":"Endpoints","title":"Spotify.users_get_profile","text":"users_get_profile(user_id)\n\nSummary: Get public profile information about a Spotify user.\n\nArguments\n\nuser_id : Alphanumeric ID of the user or name (e.g. \"smedjan\")\n\nExample\n\njulia> users_get_profile(\"smedjan\")[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 8 entries:\n  :display_name  => \"smedjan\"\n  :external_urls => {…\n  :followers     => {…\n  :href          => \"https://api.spotify.com/v1/users/smedjan\"\n  :id            => \"smedjan\"\n  :images        => Union{}[]\n  :type          => \"user\"\n  :uri           => \"spotify:user:smedjan\"\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"examples.html#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples.html#Listing-your-saved-tracks","page":"Examples","title":"Listing your saved tracks","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"First things first ensure you have all the required components","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Spotify\nusing Spotify.Library\nUsing Spotify","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Once you are authenticated you can run ","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"offset = 0\nst, repeat_after_sec = library_get_saved_tracks(1, offset, \"NO\")\n@info \"Listing $(st.total) tracks. Pauses may occur due the the current API rate limit.\"\n\nrepeat_after_sec = 0\nwhile true\n    while true\n        repeat_after_sec !=0 && sleep(repeat_after_sec + 0.5)\n        st, repeat_after_sec = library_get_saved_tracks(50, offset, \"NO\")\n        repeat_after_sec == 0 && break\n    end\n    for (i, t) in enumerate(st.items)\n        println(lpad(i + offset, 5), t.track.name)\n    end\n    offset += length(st.items)\n    offset >= st.total && break\nend","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"which may take some time depending on your library size","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"tip: For faster results\nWe recommend just getting the default number (20) of tracks from your library using library_get_saved_tracks()","category":"page"},{"location":"examples.html#Extracting-and-Saving-all-your-*Liked*-songs","page":"Examples","title":"Extracting & Saving all your Liked songs","text":"","category":"section"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Based on indexing using the library_get_saved_tracks() function you could potentially create a CSV of all the tracks you've liked.","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"Here's one example of how you might do this","category":"page"},{"location":"examples.html","page":"Examples","title":"Examples","text":"using Spotify\nusing Spotify.Library\nusing Spotify.Tracks\nusing DataFrames\n\n\n## Get tracks loop\n\nfunction define_df()\n    @info Defining the dataframe\n    temp = library_get_saved_tracks(1)[1][\"items\"][1]\n    global tracks_df = DataFrame(;Dict(temp[\"track\"])...)\n    tracks_df[\"added_at\"] = temp[\"added_at\"]\n    delete!(tracks_df,1)\nend\n\ndefine_df()\n##\n\n@warn \"Attempting to retrieve the last 2,000 songs from Spotify \\n This may take some time\"\nfor batch = 0:20:2000\n    println(\"Getting batch: \", batch/20)\n    temp = library_get_saved_tracks(20,(batch+1))[1][\"items\"]\n\n    for i in 1:20\n        temp2 = DataFrame(;Dict(temp[i][\"track\"])...)\n        temp2[\"added_at\"] = temp[i][\"added_at\"]\n        println(\"Adding Track: \", temp[i][\"track\"][\"name\"])\n        append!(tracks_df, temp2, cols=:union)\n\n    end\n\n    #sleep(rand(1:11))\nend\n\n##\nsize(tracks_df)\n\nunique!(tracks_df, \"id\")\n\n##\nusing CSV\nsomething.(tracks_df, missing) |> CSV.write(\"track_data.csv\")","category":"page"},{"location":"authentication.html#First-Steps","page":"First Steps","title":"First Steps","text":"","category":"section"},{"location":"authentication.html#Obtaining-API-Keys","page":"First Steps","title":"Obtaining API Keys","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Visit the Spotify developer website and login/register.","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Once registered visit your dashboard and \"Create an App\". Call it whatever you want!","category":"page"},{"location":"authentication.html#Redirect-URI","page":"First Steps","title":"Redirect URI","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Open the app and edit the settings. In the field where it asks for Redirect URI enter http://127.0.0.1:8080.","category":"page"},{"location":"authentication.html#Setting-credentials","page":"First Steps","title":"Setting credentials","text":"","category":"section"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"When you first run","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"using Spotify","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Spotify.jl will create an .ini file in your home directory. This is where you will insert your Client ID, Client Secret, and your Spotify username.","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"warning: Sensitive Information\nDo not share you credentials with anyone. The .ini file is placed in your homedir as means to seperate your credentials from being shared along with your code!","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"   [User procedure:]\n  1 1: How to get the CLIENT_ID=Developer.spotify.com -> Dashboard -> log in -> \n  2 2: How to get CLIENT_SECRET=When you have client id, press 'Show client secr\n  3 3: How to give REDIRECT_URL=Still in the app dashboard:\n  4     'Edit settings' -> Redirect uris -> http://127.0.0.1:8080 -> Save change\n  5 [Spotify developer's credentials]\n  6 CLIENT_ID=YOUR_CLIENT_ID\n  7 REDIRECT_URI=http://127.0.0.1:8080\n  8 CLIENT_SECRET=YOUR_CLIENT_SECRET\n  9 [Spotify user id]\n 10 user_name=YOUR_USERNAME\n ```\n\n Now you are ready to try running a command. For example getting 20 of your saved tracks\n ```\n Spotify.Library.library_get_saved_tracks()\n[ Info: Starting asyncronous user authorization process. Try again later!\n\tListening for authorization on 127.0.0.1:8080 and path \n\tLaunching a browser at: https://accounts.spotify.com/authorize?client_id=86e72e3fb91149d395088fdd0234f44d&redirect_uri=http:%2F%2F127.0.0.1:8080&scope=user-read-private%20user-read-email%20user-follow-read%20user-library-read&show_dialog=true&response_type=token&state=987\n\tTrying to launch browser candidate: firefox\n[ Info: Waiting for 15 seconds","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"tip: Browser not opening?\nIf a browser does not open asking you to allow your API to access you account data, then simply run the command again and visit the link that is output by the REPL","category":"page"},{"location":"authentication.html","page":"First Steps","title":"First Steps","text":"Once the website opens and you allow the API to query your data you will be redirected to the http://127.0.0.1:8080 page. You can close the window and query. Credentials typically last about an hour before needing to be refreshed.","category":"page"},{"location":"reference/api.html#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/api.html","page":"Reference","title":"Reference","text":"Modules = [Spotify]\nOrder   = [:macro, :function, :type, :constant, ]","category":"page"},{"location":"reference/api.html#Spotify.@_ie-Tuple","page":"Reference","title":"Spotify.@_ie","text":"import export shorthand\n\n\n\n\n\n","category":"macro"},{"location":"reference/api.html#Spotify._get_ini_fnam-Tuple{}","page":"Reference","title":"Spotify._get_ini_fnam","text":"Get an existing, readable ini file name, create it if necessary\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.apply_and_wait_for_implicit_grant-Tuple{}","page":"Reference","title":"Spotify.apply_and_wait_for_implicit_grant","text":"apply_and_wait_for_implicit_grant(;scopes::Vector{String} = DEFAULT_IMPLICIT_GRANT)\n\nStart the negotiations for an extended scope!\nWait for it!\n\nThe result shows up in console, and in the stored credentials.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.authorize-Tuple{}","page":"Reference","title":"Spotify.authorize","text":"authorize()\n-> Bool\n\nGet and store client credentials. Any other credentials will be dropped.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.body_string-Tuple{}","page":"Reference","title":"Spotify.body_string","text":"body_string\n\nEncodes the arguments as expected in a HTTP message body.\n\nType info and strurcture is in JSON format.\n\nWe define our own types through StructTypes and JSON3 in 'types.jl'.\n\nEmpty values => the key is also considered redundant.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.build_query_string-Tuple{Vararg{String}}","page":"Reference","title":"Spotify.build_query_string","text":"build_query_string(xs::Vararg{String,N} where N)\n\nIncludes separators if needed, for urlstrings.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.colored_function_call_string-Tuple{Any, Any, Any}","page":"Reference","title":"Spotify.colored_function_call_string","text":"coloredfunctioncallstring(loaded, funcsymb, namesby_func) - String\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.colored_function_call_string-Tuple{Any, Any}","page":"Reference","title":"Spotify.colored_function_call_string","text":"coloredfunctioncall_string(funcsymb, argvals) -> String\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.colored_repr-Tuple{Any}","page":"Reference","title":"Spotify.colored_repr","text":"\"     colored_repr(x)     -> String\n\nString which can be 'pretty-printed': colourful indication of types which after displaying can still be copied for parsing as strings.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.function_menu-Tuple{Vector{Symbol}}","page":"Reference","title":"Spotify.function_menu","text":"Called by select_functions\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.get_authorization_field-Tuple{}","page":"Reference","title":"Spotify.get_authorization_field","text":"get_authorization_field(;scope = \"client-credentials\", additional_scope = \"\")\n\nFor Spotify requests, provide authorization field. If 'scope' is outside current grant, apply to user / Spotify for more.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.get_id_secret_redirect-Tuple{}","page":"Reference","title":"Spotify.get_id_secret_redirect","text":"Get id and secret as 32-byte string, no encryption\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.has_ig_access_token-Tuple{}","page":"Reference","title":"Spotify.has_ig_access_token","text":"hasigaccess_token()\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.is_function_loaded-Tuple{Symbol}","page":"Reference","title":"Spotify.is_function_loaded","text":"isfunctionloaded(foo::Symbol)\n\njulia> using Spotify.Library\njulia> Spotify.is_function_loaded(:library_get_saved_shows)\ntrue\n\njulia> Spotify.is_function_loaded(:markets_get)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.is_module_loaded-Tuple{Symbol}","page":"Reference","title":"Spotify.is_module_loaded","text":"ismoduleloaded(foo::Symbol)\n\njulia> using Spotify.Library\njulia> Spotify.is_module_loaded(:Library)\ntrue\n\njulia> Spotify.is_module_loaded(:Artists)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.launch_a_browser_that_asks_for_implicit_grant-Tuple{}","page":"Reference","title":"Spotify.launch_a_browser_that_asks_for_implicit_grant","text":"launch_a_browser_that_asks_for_implicit_grant(;scopes::Vector{String} = DEFAULT_IMPLICIT_GRANT)\n\nCalled by apply_and_wait_for_implicit_grant.\n\nLaunch an available browser with an uri that contains the scope we are looking for. Exit at once.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.launch_async_single_grant_receiving_server-Tuple{}","page":"Reference","title":"Spotify.launch_async_single_grant_receiving_server","text":"launch_async_single_grant_receiving_server()\n\nCalled by apply_and_wait_for_implicit_grant.\n\nThe server runs asyncronously. It stays open a certain time, waiting for a request containing a new grant. The grant is negotiated between Spotify and the user of the browser we launch.\n\nThe request is received from the browser, which got it from Spotify. This server hands the request over to receive_grant_as_request.\n\nServer closes after some time, or when the grant has been received and stored.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.launch_command_windows-Tuple{Any}","page":"Reference","title":"Spotify.launch_command_windows","text":"Constructs windows launch command\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.make_default_calls_and_print-Tuple{Vector{Symbol}}","page":"Reference","title":"Spotify.make_default_calls_and_print","text":"Called by select_calls after user interaction\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.menu_items-Tuple{Any, Any, Any}","page":"Reference","title":"Spotify.menu_items","text":"menuitems(funcsymbs, funcloaded, namesby_func) -> Vector{String}\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.module_menu-Tuple{}","page":"Reference","title":"Spotify.module_menu","text":"Called by select_functions\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.module_symbols-Tuple{}","page":"Reference","title":"Spotify.module_symbols","text":"Sub-modules of Spotify, included ones that are not loaded. Exclude JSON3.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.parse_copied_link-Tuple{Any}","page":"Reference","title":"Spotify.parse_copied_link","text":"parse_copied_link(s)\n-> SpPlaylistId, SpTrackId, SpArtistId, SpId, SpAlbumId, SpCategoryId, SpEpisodeId, SpShowId\n\nParse links copied from Spotify to a type which can be used in API wrapper calls:\n\nSpotify app -> Right click -> Share -> Copy link to clipboard\n\nSpotify app -> Right click -> Share -> Copy embed code to clipboard\n\njulia> track_id = parse_copied_link(\"https://open.spotify.com/track/0pXkRXjPFg0NCLgPTyJKwc?si=6e74b17f726244d7\")\nspotify:track:0pXkRXjPFg0NCLgPTyJKwc\n\njulia> artist_id = parse_copied_link(\"<iframe style=\"border-radius:12px\" src=\"https://open.spotify.com/embed/artist/7FpOGzPK8QgIpFOky6PnGk?utm_source=generator\" width=\"100%\" height=\"352\" frameBorder=\"0\" allowfullscreen=\"\" allow=\"autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture\" loading=\"lazy\"></iframe>\"\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_current_track-Tuple{}","page":"Reference","title":"Spotify.player_get_current_track","text":"player_get_current_track(;additional_types = \"track\", market = \"\")\n\nSummary: Get the object currently being played on the user's Spotify account.\n\nOptional keywords\n\nadditional_types : \"track\" (default) or \"episode\"\nmarket         : An ISO 3166-1 alpha-2 country code. If a country code is specified,                    only episodes that are available in that market will be returned.                    Default is set to \"US\".\n\nExample\n\njulia> player_get_current_track()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 7 entries:\n  :timestamp              => 1636491068506\n  :context                => {…\n  :progress_ms            => 5265\n  :item                   => {…\n  :currently_playing_type => \"track\"\n  :actions                => {…\n  :is_playing             => true\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_devices-Tuple{}","page":"Reference","title":"Spotify.player_get_devices","text":"player_get_devices()\n\nSummary: Get information about a user’s available devices.\n\nExample\n\njulia> player_get_devices()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :devices => JSON3.Object[{…\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_get_state-Tuple{}","page":"Reference","title":"Spotify.player_get_state","text":"player_get_state(;additional_types = \"track\", market = \"\")\n\nSummary: Get information about the user’s current playback state, including track or episode,              progress, and active device.\n\nOptional keywords\n\nadditional_types : \"track\" (default) or \"episode\"\nmarket           : An ISO 3166-1 alpha-2 country code. If a country code is specified, only content                      that is available in that market will be returned. If a valid user access token                      is specified in the request header, the country associated with the user account                      will take priority over this parameter. Note: If neither market or user country                     are provided, the content is considered unavailable for the client.  Users can                     view the country that is associated with their account in the account settings.                     NOTE: Default is set to \"\".\n\nExample\n\njulia> player_get_state()[1]\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 10 entries:\n  :device                 => {…\n  :shuffle_state          => false\n  :repeat_state           => \"off\"\n  :timestamp              => 1636493367689\n  :context                => {…\n  :progress_ms            => 66454\n  :item                   => {…\n  :currently_playing_type => \"track\"\n  :actions                => {…\n  :is_playing             => true\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_pause-Tuple{}","page":"Reference","title":"Spotify.player_pause","text":"player_pause(;device_id = \"\")\n\nSummary: Pause playback on the user's account.\n\nOptional keywords\n\ndevice_id   The id of the device this command is targeting. If not supplied, the user's currently active device is the target.   Example value:   \"0d1841b0976bae2a3a310dd74c0f3df354899bc8\"\n\nExample\n\njulia> device_id = player_get_devices()[1].devices[1].id;\n\njulia> player_pause(;device_id)\n({}, 0)\n\njulia> player_pause() # Fails because we already paused, see `player_resume_playback`\n┌ Info: 403 (code meaning): Forbidden - The server understood the request, but is refusing to fulfill it.\n└               (response message): Player command failed: Restriction violated\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_resume_playback-Union{Tuple{}, Tuple{T}, Tuple{S}} where {S, T}","page":"Reference","title":"Spotify.player_resume_playback","text":"player_resume_playback(;device_id = \"\", context_uri = \"\", uris = \"\", offset = 0, position_ms = 0)\n\nSummary: Start a new context or resume current playback on the user's active device.\n\nOptional keywords\n\ndevice_id     The id of the device this command is targeting. If not supplied, the user's currently active device is the target. Example value:\n\n\"0d1841b0976bae2a3a310dd74c0f3df354899bc8\"\n\ncontext_uri   Spotify URI of the context to play. Valid contexts are albums, artists & playlists. {context_uri:\"spotify:album:1Je1IMUlBXcx1Fz0WE7oPT\"}\nuris          Vector of arguments to (queue and) play. Accepts string types (with prefixes like 'spotify:track:') or types like SpTrackId, SpEpisodeId.\noffset        Indicates from where in the context playback should start. Only available when context_uri corresponds to an album or playlist object   \"position\" is zero based and can’t be negative. Example: \"offset\": {\"position\": 5} \"uri\" is a string representing the uri of the item to start at.                 Example: \"offset\": {\"uri\": \"spotify:track:1301WleyT98MSxVHPZCA6M\"}\nposition_ms   Integer\n\nExamples\n\njulia> context_uri = SpAlbumId(\"1XORY4rQNhqkZxTze6Px90\")\nspotify:album:1XORY4rQNhqkZxTze6Px90\n\njulia> offset = Dict(\"position\" => 35) # Song no.\nDict{String, Int64} with 1 entry:\n  \"position\" => 35\njulia> position_ms = 59000\n59000\njulia> player_resume_playback(;context_uri, offset, position_ms)[1]\n{}\n\nWe can alternatively specify a sequence of tracks, here no. 1 and 35 from the same album. We can set the starting position for the first of those:\n\njulia> uris = SpTrackId.([\"4SFBV7SRNG2e2kyL1F6kjU\", \"46J1vycWdEZPkSbWUdwMZQ\"])\n2-element Vector{SpTrackId}:\n spotify:track:4SFBV7SRNG2e2kyL1F6kjU\n spotify:track:46J1vycWdEZPkSbWUdwMZQ\n\njulia> player_resume_playback(;uris, position_ms = 82000)[1]\n{}\n\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_seek-Tuple{Any}","page":"Reference","title":"Spotify.player_seek","text":"player_seek(position_ms; device_id = \"\")\n\nSummary: Seeks to the given position in the user’s currently playing track.\n\nArguments\n\nposition_ms   The position in milliseconds to seek to. Must be a positive number. Passing in a position that is greater than the length of the track will cause the player to start playing the next song.\n\nOptional keywords\n\ndevice_id     The id of the device this command is targeting. If not supplied, the user's currently active device is the target. Example value:\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_skip_to_next-Tuple{}","page":"Reference","title":"Spotify.player_skip_to_next","text":"player_skip_to_next(;device_id = \"\")\n\nSummary: Skips to next track in the user’s queue.\n\ndevice_id    The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.player_skip_to_previous-Tuple{}","page":"Reference","title":"Spotify.player_skip_to_previous","text":"player_skip_to_previous(;device_id = \"\")\n\nSummary: Skips to previous track in the user’s queue.\n\ndevice_id    The id of the device this command is targeting. If not supplied, the user's currently active device is the target.\n\nReference\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.receive_grant_as_request-Tuple{HTTP.Messages.Request}","page":"Reference","title":"Spotify.receive_grant_as_request","text":"receive_grant_as_request(req::HTTP.Request)\n\nThis handler is called by launch_async_single_grant_receiving_server, when the server receives a request from the browser. We return a response for user feedback, but the main effect is that we update the credentials stored in memory.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.request_to_stdout-NTuple{6, Any}","page":"Reference","title":"Spotify.request_to_stdout","text":"request_to_stdout(method, url, body, authorizationfield, logstate, no_mistake)\n\nPrint a request after it is made.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.select_calls-Tuple{}","page":"Reference","title":"Spotify.select_calls","text":"select_calls()\n\nOpen an interactive menu in the console. User picks modules, then functions in those. Calls are made with default arguments, defined in src/lookup/paramname_default_dic.\n\nConsole output is formatted for pasting  into inline documentation.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.select_functions-Tuple{}","page":"Reference","title":"Spotify.select_functions","text":"select_functions()\n\nPick a subset of loaded functions for calling in sequence with default arguments.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.spotcred-Tuple{}","page":"Reference","title":"Spotify.spotcred","text":"Access current stored credentials\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.spotify_request","page":"Reference","title":"Spotify.spotify_request","text":"spotify_request(url_ext::String, method::String= \"GET\"; \n                scope = \"client-credentials\", additional_scope = \"\", \n                body = \"\", logstate = LOGSTATE)\n -> (r::JSON3.Object, retry_in_seconds::Int)\n\nAccess the Spotify Web API. This is called by every function  in /by_console_doc/ and /by_reference_doc/. Error results return an empty Object.  Errors are written to 'stderr', expect for 'API rate limit exceeded', as  the output would typically occur in the middle of recursive calls.\n\n\n\n\n\n","category":"function"},{"location":"reference/api.html#Spotify.urlstring-Tuple{}","page":"Reference","title":"Spotify.urlstring","text":"urlstring\n\nEncodes the arguments as expected in a query string.\n\nType info is seldom necessary, because the type of arguments is given by the API endpoint.\n\nEmpty argument values => the argument name is considered redundant.\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.wait_for_ig_access-Tuple{}","page":"Reference","title":"Spotify.wait_for_ig_access","text":"waitforigaccess(; timeoutin_seconds = 30)\n\n\n\n\n\n","category":"method"},{"location":"reference/api.html#Spotify.SpAlbumId","page":"Reference","title":"Spotify.SpAlbumId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpArtistId","page":"Reference","title":"Spotify.SpArtistId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpCategoryId","page":"Reference","title":"Spotify.SpCategoryId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpEpisodeId","page":"Reference","title":"Spotify.SpEpisodeId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpId","page":"Reference","title":"Spotify.SpId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpPlaylistId","page":"Reference","title":"Spotify.SpPlaylistId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpShowId","page":"Reference","title":"Spotify.SpShowId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpTrackId","page":"Reference","title":"Spotify.SpTrackId","text":"All web API arguments are simple strings. Spotify.jl defines some types that have context-aware representations. Type names are Sp____Id. \n\nExamples\n\nMake an instance \n\njulia> track_id = SpTrackId()        # output is colored\nspotify:track:0WdUHon5tYn2aKve13psfy\n\nIn simple web API function calls like \"audio-analysis\" below, the type of the argument is  obvious from the context; \"spotify:track\" is superfluous. \n\njulia>\"audio-analysis/$track_id\"\n\"audio-analysis/0WdUHon5tYn2aKve13psfy\"\n\nThe actual Julia wrapper function is duck typed, meaning that the 'track_id' argument type can be both String or SpTrackId. Numbers on the other hand, would produce an error.\n\nfunction tracks_get_audio_analysis(track_id)\n    tid = SpTrackId(track_id)\n    spotify_request(\"audio-analysis/$tid\")\nend\n\nOther API calls need more type information. Spotify understands the 'Spotify URI' ) format, where type is denoted by string prefixes. Such functions use a 'request body' to pass arguments. Request bodies  often contain several arguments in a structure, for example a list or a dictionary. Request bodies  comply with the JSON format.\n\nSo in a 'request body', we would represent 'track_id' like this:\n\njulia> Spotify.JSON3.write(track_id)\n\"\\\"spotify:track:0WdUHon5tYn2aKve13psfy\\\"\"\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.SpotifyCredentials","page":"Reference","title":"Spotify.SpotifyCredentials","text":"Stored credentials\n\n\n\n\n\n","category":"type"},{"location":"reference/api.html#Spotify.AUTH_URL","page":"Reference","title":"Spotify.AUTH_URL","text":"For the client credentials flow\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.BROWSERS","page":"Reference","title":"Spotify.BROWSERS","text":"A list of potentially available browsers, to be tried in succession if present\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.DEFAULT_IMPLICIT_GRANT","page":"Reference","title":"Spotify.DEFAULT_IMPLICIT_GRANT","text":"Default requested permissions are 'client-credentials'.\n\nThese permissions are not requested until the current scope is insufficient, or the user calls 'applyandwaitforimplicit_grant(;scopes)'\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.LOGSTATE","page":"Reference","title":"Spotify.LOGSTATE","text":"LOGSTATE mutable state\n\n.authorization::Bool\n.request_string::Bool\n.empty_response::Bool\n\nMutable flags for logging to REPL. Nice when  making inline docs or new interfaces.  This global can also be locally overruled with keyword argument to spotify_request.\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.OAUTH_AUTHORIZE_URL","page":"Reference","title":"Spotify.OAUTH_AUTHORIZE_URL","text":"For the 'Implicit grant flow'\n\n\n\n\n\n","category":"constant"},{"location":"reference/api.html#Spotify.SPOTCRED","page":"Reference","title":"Spotify.SPOTCRED","text":"Current stored credentials, access by spotcred()\n\n\n\n\n\n","category":"constant"},{"location":"reference/functionindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"reference/functionindex.html","page":"Index","title":"Index","text":"","category":"page"},{"location":"index.html#Spotify.jl","page":"Spotify.jl","title":"Spotify.jl","text":"","category":"section"},{"location":"index.html#A-simple-Spotify-API-Wrapper-in-Julia","page":"Spotify.jl","title":"A simple Spotify API Wrapper in Julia","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"warning: In Progress\nThis package and the accompanying documentation is still under development","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Spofity.jl aims to create a simple interface with the Spotify API to provide Julia users with Spotify data.","category":"page"},{"location":"index.html#Use-Cases","page":"Spotify.jl","title":"Use Cases","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Create your own recommendation algorithm\nDashboards for music listening habits\nAnalyze audio features for music you enjoy\nAutomatically create playlists\nCreate applications to augment your music experience","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"We are excited to complete the project and see what people can create using `Spotify.jl'","category":"page"},{"location":"index.html#In-progress","page":"Spotify.jl","title":"In progress","text":"","category":"section"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Right now, 40 API functions have been written, roughly tested and organized by sub-modules as defined in Spotify's documentation:","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Albums, Artists, Browse, Episodes, Follow, Library Markets, Player, Playlists, Search, Shows, Tracks, Users","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Help wanted in adding the still-missing functions!","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Ouput from function calls is JSON3 objects, which can be readily manipulated in the REPL or in other packages.","category":"page"},{"location":"index.html","page":"Spotify.jl","title":"Spotify.jl","text":"Input to all functions is basically strings, but some ad-hoc string types are defined. These provide potential input checking, and some assistance in finding dummy parameters. Dummy parameters are defined in the 'test' folder, but more accessible through the menu system, see below.","category":"page"}]
}
